import {
  classAdderBuilder
} from "./chunk-WZFCNKGK.js";
import "./chunk-MMI7NAQ6.js";
import {
  classMap,
  forwardEventsBuilder,
  useActions
} from "./chunk-GGS237SP.js";
import "./chunk-X7HCJ7ZS.js";
import "./chunk-FBWM3HWJ.js";
import {
  SvelteComponentDev,
  action_destroyer,
  add_location,
  assign,
  binding_callbacks,
  children,
  claim_element,
  compute_rest_props,
  create_slot,
  detach_dev,
  dispatch_dev,
  element,
  exclude_internal_props,
  get_all_dirty_from_scope,
  get_current_component,
  get_slot_changes,
  get_spread_update,
  init,
  insert_hydration_dev,
  is_function,
  run_all,
  safe_not_equal,
  set_attributes,
  transition_in,
  transition_out,
  update_slot_base,
  validate_slots
} from "./chunk-NMMN3PC6.js";
import "./chunk-ZB6PEJPW.js";
import "./chunk-4DGM7FRE.js";
import "./chunk-7U33LM2Z.js";

// node_modules/@smui/paper/dist/Paper.svelte
var file = "node_modules/@smui/paper/dist/Paper.svelte";
function create_fragment(ctx) {
  let div;
  let div_class_value;
  let useActions_action;
  let forwardEvents_action;
  let current;
  let mounted;
  let dispose;
  const default_slot_template = (
    /*#slots*/
    ctx[12].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[11],
    null
  );
  let div_levels = [
    {
      class: div_class_value = classMap({
        [
          /*className*/
          ctx[1]
        ]: true,
        "smui-paper": true,
        "smui-paper--raised": (
          /*variant*/
          ctx[2] === "raised"
        ),
        "smui-paper--unelevated": (
          /*variant*/
          ctx[2] === "unelevated"
        ),
        "smui-paper--outlined": (
          /*variant*/
          ctx[2] === "outlined"
        ),
        ["smui-paper--elevation-z" + /*elevation*/
        ctx[5]]: (
          /*elevation*/
          ctx[5] !== 0 && /*variant*/
          ctx[2] === "raised"
        ),
        "smui-paper--rounded": !/*square*/
        ctx[3],
        ["smui-paper--color-" + /*color*/
        ctx[4]]: (
          /*color*/
          ctx[4] !== "default"
        ),
        "smui-paper-transition": (
          /*transition*/
          ctx[6]
        )
      })
    },
    /*$$restProps*/
    ctx[9]
  ];
  let div_data = {};
  for (let i = 0; i < div_levels.length; i += 1) {
    div_data = assign(div_data, div_levels[i]);
  }
  const block = {
    c: function create() {
      div = element("div");
      if (default_slot)
        default_slot.c();
      this.h();
    },
    l: function claim(nodes) {
      div = claim_element(nodes, "DIV", { class: true });
      var div_nodes = children(div);
      if (default_slot)
        default_slot.l(div_nodes);
      div_nodes.forEach(detach_dev);
      this.h();
    },
    h: function hydrate() {
      set_attributes(div, div_data);
      add_location(div, file, 0, 0, 0);
    },
    m: function mount(target, anchor) {
      insert_hydration_dev(target, div, anchor);
      if (default_slot) {
        default_slot.m(div, null);
      }
      ctx[13](div);
      current = true;
      if (!mounted) {
        dispose = [
          action_destroyer(useActions_action = useActions.call(
            null,
            div,
            /*use*/
            ctx[0]
          )),
          action_destroyer(forwardEvents_action = /*forwardEvents*/
          ctx[8].call(null, div))
        ];
        mounted = true;
      }
    },
    p: function update(ctx2, [dirty]) {
      if (default_slot) {
        if (default_slot.p && (!current || dirty & /*$$scope*/
        2048)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[11],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[11]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[11],
              dirty,
              null
            ),
            null
          );
        }
      }
      set_attributes(div, div_data = get_spread_update(div_levels, [
        (!current || dirty & /*className, variant, elevation, square, color, transition*/
        126 && div_class_value !== (div_class_value = classMap({
          [
            /*className*/
            ctx2[1]
          ]: true,
          "smui-paper": true,
          "smui-paper--raised": (
            /*variant*/
            ctx2[2] === "raised"
          ),
          "smui-paper--unelevated": (
            /*variant*/
            ctx2[2] === "unelevated"
          ),
          "smui-paper--outlined": (
            /*variant*/
            ctx2[2] === "outlined"
          ),
          ["smui-paper--elevation-z" + /*elevation*/
          ctx2[5]]: (
            /*elevation*/
            ctx2[5] !== 0 && /*variant*/
            ctx2[2] === "raised"
          ),
          "smui-paper--rounded": !/*square*/
          ctx2[3],
          ["smui-paper--color-" + /*color*/
          ctx2[4]]: (
            /*color*/
            ctx2[4] !== "default"
          ),
          "smui-paper-transition": (
            /*transition*/
            ctx2[6]
          )
        }))) && { class: div_class_value },
        dirty & /*$$restProps*/
        512 && /*$$restProps*/
        ctx2[9]
      ]));
      if (useActions_action && is_function(useActions_action.update) && dirty & /*use*/
      1)
        useActions_action.update.call(
          null,
          /*use*/
          ctx2[0]
        );
    },
    i: function intro(local) {
      if (current)
        return;
      transition_in(default_slot, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(default_slot, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching) {
        detach_dev(div);
      }
      if (default_slot)
        default_slot.d(detaching);
      ctx[13](null);
      mounted = false;
      run_all(dispose);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_fragment.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function instance($$self, $$props, $$invalidate) {
  const omit_props_names = ["use", "class", "variant", "square", "color", "elevation", "transition", "getElement"];
  let $$restProps = compute_rest_props($$props, omit_props_names);
  let { $$slots: slots = {}, $$scope } = $$props;
  validate_slots("Paper", slots, ["default"]);
  const forwardEvents = forwardEventsBuilder(get_current_component());
  let { use = [] } = $$props;
  let { class: className = "" } = $$props;
  let { variant = "raised" } = $$props;
  let { square = false } = $$props;
  let { color = "default" } = $$props;
  let { elevation = 1 } = $$props;
  let { transition = false } = $$props;
  let element2;
  function getElement() {
    return element2;
  }
  function div_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      element2 = $$value;
      $$invalidate(7, element2);
    });
  }
  $$self.$$set = ($$new_props) => {
    $$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
    $$invalidate(9, $$restProps = compute_rest_props($$props, omit_props_names));
    if ("use" in $$new_props)
      $$invalidate(0, use = $$new_props.use);
    if ("class" in $$new_props)
      $$invalidate(1, className = $$new_props.class);
    if ("variant" in $$new_props)
      $$invalidate(2, variant = $$new_props.variant);
    if ("square" in $$new_props)
      $$invalidate(3, square = $$new_props.square);
    if ("color" in $$new_props)
      $$invalidate(4, color = $$new_props.color);
    if ("elevation" in $$new_props)
      $$invalidate(5, elevation = $$new_props.elevation);
    if ("transition" in $$new_props)
      $$invalidate(6, transition = $$new_props.transition);
    if ("$$scope" in $$new_props)
      $$invalidate(11, $$scope = $$new_props.$$scope);
  };
  $$self.$capture_state = () => ({
    get_current_component,
    forwardEventsBuilder,
    classMap,
    useActions,
    forwardEvents,
    use,
    className,
    variant,
    square,
    color,
    elevation,
    transition,
    element: element2,
    getElement
  });
  $$self.$inject_state = ($$new_props) => {
    if ("use" in $$props)
      $$invalidate(0, use = $$new_props.use);
    if ("className" in $$props)
      $$invalidate(1, className = $$new_props.className);
    if ("variant" in $$props)
      $$invalidate(2, variant = $$new_props.variant);
    if ("square" in $$props)
      $$invalidate(3, square = $$new_props.square);
    if ("color" in $$props)
      $$invalidate(4, color = $$new_props.color);
    if ("elevation" in $$props)
      $$invalidate(5, elevation = $$new_props.elevation);
    if ("transition" in $$props)
      $$invalidate(6, transition = $$new_props.transition);
    if ("element" in $$props)
      $$invalidate(7, element2 = $$new_props.element);
  };
  if ($$props && "$$inject" in $$props) {
    $$self.$inject_state($$props.$$inject);
  }
  return [
    use,
    className,
    variant,
    square,
    color,
    elevation,
    transition,
    element2,
    forwardEvents,
    $$restProps,
    getElement,
    $$scope,
    slots,
    div_binding
  ];
}
var Paper = class extends SvelteComponentDev {
  constructor(options) {
    super(options);
    init(this, options, instance, create_fragment, safe_not_equal, {
      use: 0,
      class: 1,
      variant: 2,
      square: 3,
      color: 4,
      elevation: 5,
      transition: 6,
      getElement: 10
    });
    dispatch_dev("SvelteRegisterComponent", {
      component: this,
      tagName: "Paper",
      options,
      id: create_fragment.name
    });
  }
  get use() {
    throw new Error("<Paper>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set use(value) {
    throw new Error("<Paper>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get class() {
    throw new Error("<Paper>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set class(value) {
    throw new Error("<Paper>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get variant() {
    throw new Error("<Paper>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set variant(value) {
    throw new Error("<Paper>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get square() {
    throw new Error("<Paper>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set square(value) {
    throw new Error("<Paper>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get color() {
    throw new Error("<Paper>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set color(value) {
    throw new Error("<Paper>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get elevation() {
    throw new Error("<Paper>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set elevation(value) {
    throw new Error("<Paper>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get transition() {
    throw new Error("<Paper>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set transition(value) {
    throw new Error("<Paper>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get getElement() {
    return this.$$.ctx[10];
  }
  set getElement(value) {
    throw new Error("<Paper>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
};
var Paper_default = Paper;

// node_modules/@smui/paper/dist/Content.js
var Content_default = classAdderBuilder({
  class: "smui-paper__content",
  tag: "div"
});

// node_modules/@smui/paper/dist/Title.js
var Title_default = classAdderBuilder({
  class: "smui-paper__title",
  tag: "h5"
});

// node_modules/@smui/paper/dist/Subtitle.js
var Subtitle_default = classAdderBuilder({
  class: "smui-paper__subtitle",
  tag: "h6"
});

// node_modules/@smui/paper/dist/index.js
var dist_default = Paper_default;
export {
  Content_default as Content,
  Subtitle_default as Subtitle,
  Title_default as Title,
  dist_default as default
};
//# sourceMappingURL=@smui_paper.js.map
