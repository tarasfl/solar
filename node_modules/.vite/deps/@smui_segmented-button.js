import {
  dist_default
} from "./chunk-HXQJIWEJ.js";
import "./chunk-CTXZTH3U.js";
import {
  CommonIcon_default,
  CommonLabel_default,
  ContextFragment_default
} from "./chunk-DVQWFXPQ.js";
import {
  classMap,
  dispatch,
  forwardEventsBuilder,
  useActions
} from "./chunk-DXJYLXNN.js";
import "./chunk-W4OU4FMO.js";
import "./chunk-Y3XZ6UIT.js";
import "./chunk-ZB6PEJPW.js";
import "./chunk-X7HCJ7ZS.js";
import {
  writable
} from "./chunk-FBWM3HWJ.js";
import "./chunk-VZS2PTXG.js";
import "./chunk-OYKM6SV3.js";
import "./chunk-RFTMRRON.js";
import "./chunk-BT6PLM7B.js";
import {
  MDCFoundation
} from "./chunk-ODRA5LQH.js";
import "./chunk-X43LXICK.js";
import {
  SvelteComponentDev,
  action_destroyer,
  add_location,
  append_hydration_dev,
  assign,
  attr_dev,
  binding_callbacks,
  check_outros,
  children,
  claim_component,
  claim_element,
  claim_space,
  component_subscribe,
  compute_rest_props,
  create_component,
  create_slot,
  destroy_component,
  detach_dev,
  dispatch_dev,
  element,
  empty,
  ensure_array_like_dev,
  exclude_internal_props,
  getContext,
  get_all_dirty_from_scope,
  get_current_component,
  get_slot_changes,
  get_spread_update,
  globals,
  group_outros,
  init,
  insert_hydration_dev,
  is_function,
  listen_dev,
  mount_component,
  onMount,
  outro_and_destroy_block,
  run_all,
  safe_not_equal,
  setContext,
  set_attributes,
  set_store_value,
  space,
  transition_in,
  transition_out,
  update_keyed_each,
  update_slot_base,
  validate_each_keys,
  validate_slots,
  validate_store
} from "./chunk-NMMN3PC6.js";
import "./chunk-4DGM7FRE.js";
import "./chunk-7U33LM2Z.js";

// node_modules/@smui/segmented-button/dist/mdc-segmented-button/segmented-button/constants.js
var cssClasses = {
  SINGLE_SELECT: "mdc-segmented-button--single-select"
};

// node_modules/@smui/segmented-button/dist/mdc-segmented-button/segmented-button/foundation.js
var MDCSegmentedButtonFoundation = class _MDCSegmentedButtonFoundation extends MDCFoundation {
  static get defaultAdapter() {
    return {
      hasClass: () => false,
      getSegments: () => [],
      selectSegment: () => void 0,
      unselectSegment: () => void 0,
      notifySelectedChange: () => void 0
    };
  }
  constructor(adapter) {
    super(Object.assign(Object.assign({}, _MDCSegmentedButtonFoundation.defaultAdapter), adapter));
  }
  /**
   * Sets identified child segment to be selected
   *
   * @param indexOrSegmentId Number index or string segmentId that identifies
   * child segment
   */
  selectSegment(indexOrSegmentId) {
    this.adapter.selectSegment(indexOrSegmentId);
  }
  /**
   * Sets identified child segment to be not selected
   *
   * @param indexOrSegmentId Number index or string segmentId that identifies
   * child segment
   */
  unselectSegment(indexOrSegmentId) {
    this.adapter.unselectSegment(indexOrSegmentId);
  }
  /**
   * @return Returns currently selected child segments as readonly list of
   * SegmentDetails
   */
  getSelectedSegments() {
    return this.adapter.getSegments().filter((segmentDetail) => segmentDetail.selected);
  }
  /**
   * @param indexOrSegmentId Number index or string segmentId that identifies
   * child segment
   * @return Returns true if identified child segment is currently selected,
   * otherwise returns false
   */
  isSegmentSelected(indexOrSegmentId) {
    return this.adapter.getSegments().some((segmentDetail) => (segmentDetail.index === indexOrSegmentId || segmentDetail.segmentId === indexOrSegmentId) && segmentDetail.selected);
  }
  /**
   * @return Returns true if segmented button is single select, otherwise
   * returns false
   */
  isSingleSelect() {
    return this.adapter.hasClass(cssClasses.SINGLE_SELECT);
  }
  /**
   * Called when child segment's selected status may have changed. If segmented
   * button is single select, unselects all child segments other than identified
   * child segment. Finally, emits event to client.
   *
   * @param detail Child segment affected represented as SegmentDetail
   * @event change With detail - SegmentDetail
   */
  handleSelected(detail) {
    if (this.isSingleSelect()) {
      this.unselectPrevSelected(detail.index);
    }
    this.adapter.notifySelectedChange(detail);
  }
  /**
   * Sets all child segments to be not selected except for child segment
   * identified by index
   *
   * @param index Index of child segment to not unselect
   */
  unselectPrevSelected(index) {
    for (let selectedSegment of this.getSelectedSegments()) {
      if (selectedSegment.index !== index) {
        this.unselectSegment(selectedSegment.index);
      }
    }
  }
};

// node_modules/@smui/segmented-button/dist/mdc-segmented-button/segment/constants.js
var booleans = {
  TRUE: "true",
  FALSE: "false"
};
var attributes = {
  ARIA_CHECKED: "aria-checked",
  ARIA_PRESSED: "aria-pressed",
  DATA_SEGMENT_ID: "data-segment-id"
};
var cssClasses2 = {
  SELECTED: "mdc-segmented-button__segment--selected"
};

// node_modules/@smui/segmented-button/dist/mdc-segmented-button/segment/foundation.js
var emptyClientRect = {
  bottom: 0,
  height: 0,
  left: 0,
  right: 0,
  top: 0,
  width: 0
};
var MDCSegmentedButtonSegmentFoundation = class _MDCSegmentedButtonSegmentFoundation extends MDCFoundation {
  static get defaultAdapter() {
    return {
      isSingleSelect: () => false,
      getAttr: () => "",
      setAttr: () => void 0,
      addClass: () => void 0,
      removeClass: () => void 0,
      hasClass: () => false,
      notifySelectedChange: () => void 0,
      getRootBoundingClientRect: () => emptyClientRect
    };
  }
  constructor(adapter) {
    super(Object.assign(Object.assign({}, _MDCSegmentedButtonSegmentFoundation.defaultAdapter), adapter));
  }
  /**
   * @return Returns true if segment is currently selected, otherwise returns
   * false
   */
  isSelected() {
    return this.adapter.hasClass(cssClasses2.SELECTED);
  }
  /**
   * Sets segment to be selected
   */
  setSelected() {
    this.adapter.addClass(cssClasses2.SELECTED);
    this.setAriaAttr(booleans.TRUE);
  }
  /**
   * Sets segment to be not selected
   */
  setUnselected() {
    this.adapter.removeClass(cssClasses2.SELECTED);
    this.setAriaAttr(booleans.FALSE);
  }
  /**
   * @return Returns segment's segmentId if it was set by client
   */
  getSegmentId() {
    var _a;
    return (_a = this.adapter.getAttr(attributes.DATA_SEGMENT_ID)) !== null && _a !== void 0 ? _a : void 0;
  }
  /**
   * Called when segment is clicked. If the wrapping segmented button is single
   * select, doesn't allow segment to be set to not selected. Otherwise, toggles
   * segment's selected status. Finally, emits event to wrapping segmented
   * button.
   *
   * @event selected With detail - SegmentDetail
   */
  handleClick() {
    if (this.adapter.isSingleSelect()) {
      this.setSelected();
    } else {
      this.toggleSelection();
    }
    this.adapter.notifySelectedChange(this.isSelected());
  }
  /**
   * @return Returns bounding rectangle for ripple effect
   */
  getDimensions() {
    return this.adapter.getRootBoundingClientRect();
  }
  /**
   * Sets segment from not selected to selected, or selected to not selected
   */
  toggleSelection() {
    if (this.isSelected()) {
      this.setUnselected();
    } else {
      this.setSelected();
    }
  }
  /**
   * Sets appropriate aria attribute, based on wrapping segmented button's
   * single selected value, to new value
   *
   * @param value Value that represents selected status
   */
  setAriaAttr(value) {
    if (this.adapter.isSingleSelect()) {
      this.adapter.setAttr(attributes.ARIA_CHECKED, value);
    } else {
      this.adapter.setAttr(attributes.ARIA_PRESSED, value);
    }
  }
};

// node_modules/@smui/segmented-button/dist/SegmentedButton.svelte
var file = "node_modules/@smui/segmented-button/dist/SegmentedButton.svelte";
function get_each_context(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[28] = list[i];
  child_ctx[30] = i;
  return child_ctx;
}
var get_default_slot_changes = (dirty) => ({ segment: dirty & /*segments*/
4 });
var get_default_slot_context = (ctx) => ({ segment: (
  /*segment*/
  ctx[28]
) });
function create_default_slot_1(ctx) {
  let current;
  const default_slot_template = (
    /*#slots*/
    ctx[17].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[19],
    get_default_slot_context
  );
  const block = {
    c: function create() {
      if (default_slot)
        default_slot.c();
    },
    l: function claim(nodes) {
      if (default_slot)
        default_slot.l(nodes);
    },
    m: function mount(target, anchor) {
      if (default_slot) {
        default_slot.m(target, anchor);
      }
      current = true;
    },
    p: function update(ctx2, dirty) {
      if (default_slot) {
        if (default_slot.p && (!current || dirty & /*$$scope, segments*/
        524292)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[19],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[19]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[19],
              dirty,
              get_default_slot_changes
            ),
            get_default_slot_context
          );
        }
      }
    },
    i: function intro(local) {
      if (current)
        return;
      transition_in(default_slot, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(default_slot, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (default_slot)
        default_slot.d(detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_default_slot_1.name,
    type: "slot",
    source: '(18:6) <ContextFragment         key=\\"SMUI:segmented-button:segment:initialSelected\\"         value={initialSelected[i]}       >',
    ctx
  });
  return block;
}
function create_default_slot(ctx) {
  let contextfragment;
  let t;
  let current;
  contextfragment = new ContextFragment_default({
    props: {
      key: "SMUI:segmented-button:segment:initialSelected",
      value: (
        /*initialSelected*/
        ctx[7][
          /*i*/
          ctx[30]
        ]
      ),
      $$slots: { default: [create_default_slot_1] },
      $$scope: { ctx }
    },
    $$inline: true
  });
  const block = {
    c: function create() {
      create_component(contextfragment.$$.fragment);
      t = space();
    },
    l: function claim(nodes) {
      claim_component(contextfragment.$$.fragment, nodes);
      t = claim_space(nodes);
    },
    m: function mount(target, anchor) {
      mount_component(contextfragment, target, anchor);
      insert_hydration_dev(target, t, anchor);
      current = true;
    },
    p: function update(ctx2, dirty) {
      const contextfragment_changes = {};
      if (dirty & /*segments*/
      4)
        contextfragment_changes.value = /*initialSelected*/
        ctx2[7][
          /*i*/
          ctx2[30]
        ];
      if (dirty & /*$$scope, segments*/
      524292) {
        contextfragment_changes.$$scope = { dirty, ctx: ctx2 };
      }
      contextfragment.$set(contextfragment_changes);
    },
    i: function intro(local) {
      if (current)
        return;
      transition_in(contextfragment.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(contextfragment.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching) {
        detach_dev(t);
      }
      destroy_component(contextfragment, detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_default_slot.name,
    type: "slot",
    source: '(17:4) <ContextFragment key=\\"SMUI:segmented-button:segment:index\\" value={i}>',
    ctx
  });
  return block;
}
function create_each_block(key_2, ctx) {
  let first;
  let contextfragment;
  let current;
  contextfragment = new ContextFragment_default({
    props: {
      key: "SMUI:segmented-button:segment:index",
      value: (
        /*i*/
        ctx[30]
      ),
      $$slots: { default: [create_default_slot] },
      $$scope: { ctx }
    },
    $$inline: true
  });
  const block = {
    key: key_2,
    first: null,
    c: function create() {
      first = empty();
      create_component(contextfragment.$$.fragment);
      this.h();
    },
    l: function claim(nodes) {
      first = empty();
      claim_component(contextfragment.$$.fragment, nodes);
      this.h();
    },
    h: function hydrate() {
      this.first = first;
    },
    m: function mount(target, anchor) {
      insert_hydration_dev(target, first, anchor);
      mount_component(contextfragment, target, anchor);
      current = true;
    },
    p: function update(new_ctx, dirty) {
      ctx = new_ctx;
      const contextfragment_changes = {};
      if (dirty & /*segments*/
      4)
        contextfragment_changes.value = /*i*/
        ctx[30];
      if (dirty & /*$$scope, segments*/
      524292) {
        contextfragment_changes.$$scope = { dirty, ctx };
      }
      contextfragment.$set(contextfragment_changes);
    },
    i: function intro(local) {
      if (current)
        return;
      transition_in(contextfragment.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(contextfragment.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching) {
        detach_dev(first);
      }
      destroy_component(contextfragment, detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_each_block.name,
    type: "each",
    source: "(16:2) {#each segments as segment, i (key(segment))}",
    ctx
  });
  return block;
}
function create_fragment(ctx) {
  let div;
  let each_blocks = [];
  let each_1_lookup = /* @__PURE__ */ new Map();
  let div_class_value;
  let div_role_value;
  let useActions_action;
  let forwardEvents_action;
  let current;
  let mounted;
  let dispose;
  let each_value = ensure_array_like_dev(
    /*segments*/
    ctx[2]
  );
  const get_key = (ctx2) => (
    /*key*/
    ctx2[3](
      /*segment*/
      ctx2[28]
    )
  );
  validate_each_keys(ctx, each_value, get_each_context, get_key);
  for (let i = 0; i < each_value.length; i += 1) {
    let child_ctx = get_each_context(ctx, each_value, i);
    let key = get_key(child_ctx);
    each_1_lookup.set(key, each_blocks[i] = create_each_block(key, child_ctx));
  }
  let div_levels = [
    {
      class: div_class_value = classMap({
        [
          /*className*/
          ctx[1]
        ]: true,
        "mdc-segmented-button": true,
        "mdc-segmented-button--single-select": (
          /*singleSelect*/
          ctx[4]
        )
      })
    },
    {
      role: div_role_value = /*singleSelect*/
      ctx[4] ? "radiogroup" : "group"
    },
    /*$$restProps*/
    ctx[12]
  ];
  let div_data = {};
  for (let i = 0; i < div_levels.length; i += 1) {
    div_data = assign(div_data, div_levels[i]);
  }
  const block = {
    c: function create() {
      div = element("div");
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      this.h();
    },
    l: function claim(nodes) {
      div = claim_element(nodes, "DIV", { class: true, role: true });
      var div_nodes = children(div);
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].l(div_nodes);
      }
      div_nodes.forEach(detach_dev);
      this.h();
    },
    h: function hydrate() {
      set_attributes(div, div_data);
      add_location(div, file, 0, 0, 0);
    },
    m: function mount(target, anchor) {
      insert_hydration_dev(target, div, anchor);
      for (let i = 0; i < each_blocks.length; i += 1) {
        if (each_blocks[i]) {
          each_blocks[i].m(div, null);
        }
      }
      ctx[18](div);
      current = true;
      if (!mounted) {
        dispose = [
          action_destroyer(useActions_action = useActions.call(
            null,
            div,
            /*use*/
            ctx[0]
          )),
          action_destroyer(forwardEvents_action = /*forwardEvents*/
          ctx[6].call(null, div)),
          listen_dev(
            div,
            "SMUISegmentedButtonSegment:mount",
            /*handleSegmentMount*/
            ctx[9],
            false,
            false,
            false,
            false
          ),
          listen_dev(
            div,
            "SMUISegmentedButtonSegment:unmount",
            /*handleSegmentUnmount*/
            ctx[10],
            false,
            false,
            false,
            false
          ),
          listen_dev(
            div,
            "selected",
            /*handleSelected*/
            ctx[11],
            false,
            false,
            false,
            false
          )
        ];
        mounted = true;
      }
    },
    p: function update(ctx2, [dirty]) {
      if (dirty & /*segments, initialSelected, $$scope, key*/
      524428) {
        each_value = ensure_array_like_dev(
          /*segments*/
          ctx2[2]
        );
        group_outros();
        validate_each_keys(ctx2, each_value, get_each_context, get_key);
        each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx2, each_value, each_1_lookup, div, outro_and_destroy_block, create_each_block, null, get_each_context);
        check_outros();
      }
      set_attributes(div, div_data = get_spread_update(div_levels, [
        (!current || dirty & /*className, singleSelect*/
        18 && div_class_value !== (div_class_value = classMap({
          [
            /*className*/
            ctx2[1]
          ]: true,
          "mdc-segmented-button": true,
          "mdc-segmented-button--single-select": (
            /*singleSelect*/
            ctx2[4]
          )
        }))) && { class: div_class_value },
        (!current || dirty & /*singleSelect*/
        16 && div_role_value !== (div_role_value = /*singleSelect*/
        ctx2[4] ? "radiogroup" : "group")) && { role: div_role_value },
        dirty & /*$$restProps*/
        4096 && /*$$restProps*/
        ctx2[12]
      ]));
      if (useActions_action && is_function(useActions_action.update) && dirty & /*use*/
      1)
        useActions_action.update.call(
          null,
          /*use*/
          ctx2[0]
        );
    },
    i: function intro(local) {
      if (current)
        return;
      for (let i = 0; i < each_value.length; i += 1) {
        transition_in(each_blocks[i]);
      }
      current = true;
    },
    o: function outro(local) {
      for (let i = 0; i < each_blocks.length; i += 1) {
        transition_out(each_blocks[i]);
      }
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching) {
        detach_dev(div);
      }
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].d();
      }
      ctx[18](null);
      mounted = false;
      run_all(dispose);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_fragment.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function setDifference(setA, setB) {
  let _difference = new Set(setA);
  for (let elem of setB) {
    _difference.delete(elem);
  }
  return _difference;
}
function instance_1($$self, $$props, $$invalidate) {
  const omit_props_names = ["use", "class", "segments", "key", "singleSelect", "selected", "getElement"];
  let $$restProps = compute_rest_props($$props, omit_props_names);
  let $singleSelectStore;
  let { $$slots: slots = {}, $$scope } = $$props;
  validate_slots("SegmentedButton", slots, ["default"]);
  const forwardEvents = forwardEventsBuilder(get_current_component());
  let { use = [] } = $$props;
  let { class: className = "" } = $$props;
  let { segments = [] } = $$props;
  let { key = (segment) => segment } = $$props;
  let { singleSelect = false } = $$props;
  let { selected = singleSelect ? void 0 : [] } = $$props;
  let element2;
  let instance;
  let segmentAccessorMap = {};
  let segmentAccessorWeakMap = /* @__PURE__ */ new WeakMap();
  let initialSelected = segments.map((segmentId) => singleSelect && selected === segmentId || !singleSelect && selected.indexOf(segmentId) !== -1);
  setContext("SMUI:icon:context", "segmented-button");
  setContext("SMUI:label:context", "segmented-button");
  const singleSelectStore = writable(singleSelect);
  validate_store(singleSelectStore, "singleSelectStore");
  component_subscribe($$self, singleSelectStore, (value) => $$invalidate(21, $singleSelectStore = value));
  setContext("SMUI:segmented-button:singleSelect", singleSelectStore);
  let previousSelected = singleSelect ? selected : new Set(selected);
  onMount(() => {
    $$invalidate(15, instance = new MDCSegmentedButtonFoundation({
      hasClass: (className2) => {
        return getElement().classList.contains(className2);
      },
      getSegments: () => {
        return segments.map((segment, index) => ({
          index,
          selected: singleSelect ? selected === segment : selected.indexOf(segment) !== -1
        }));
      },
      selectSegment,
      unselectSegment,
      notifySelectedChange: (detail) => {
        if (detail.selected) {
          selectSegment(detail.index);
        } else {
          unselectSegment(detail.index);
        }
        dispatch(getElement(), "change", detail);
      }
    }));
    instance.init();
    return () => {
      instance.destroy();
    };
  });
  function handleSegmentMount(event) {
    const accessor = event.detail;
    addAccessor(accessor.segmentId, accessor);
  }
  function handleSegmentUnmount(event) {
    const accessor = event.detail;
    removeAccessor(accessor.segmentId);
  }
  function handleSelected(event) {
    if (instance) {
      instance.handleSelected(event.detail);
    }
  }
  function getAccessor(segmentId) {
    return segmentId instanceof Object ? segmentAccessorWeakMap.get(segmentId) : segmentAccessorMap[segmentId];
  }
  function addAccessor(segmentId, accessor) {
    if (segmentId instanceof Object) {
      segmentAccessorWeakMap.set(segmentId, accessor);
    } else {
      segmentAccessorMap[segmentId] = accessor;
    }
  }
  function removeAccessor(segmentId) {
    if (segmentId instanceof Object) {
      segmentAccessorWeakMap.delete(segmentId);
    } else {
      delete segmentAccessorMap[segmentId];
    }
  }
  function selectSegment(indexOrSegmentId) {
    let index = segments.indexOf(indexOrSegmentId);
    if (index === -1) {
      index = indexOrSegmentId;
    }
    if (!singleSelect) {
      const selIndex = selected.indexOf(segments[index]);
      if (selIndex === -1) {
        selected.push(segments[index]);
        $$invalidate(13, selected);
      }
    } else if (selected !== segments[index]) {
      $$invalidate(13, selected = segments[index]);
    }
    const accessor = getAccessor(segments[index]);
    if (accessor) {
      accessor.selected = true;
    }
  }
  function unselectSegment(indexOrSegmentId) {
    let index = segments.indexOf(indexOrSegmentId);
    if (index === -1) {
      index = indexOrSegmentId;
    }
    if (!singleSelect) {
      const selIndex = selected.indexOf(segments[index]);
      if (selIndex !== -1) {
        selected.splice(selIndex, 1);
        $$invalidate(13, selected);
      }
    } else if (selected === segments[index]) {
      $$invalidate(13, selected = null);
    }
    const accessor = getAccessor(segments[index]);
    if (accessor) {
      accessor.selected = false;
    }
  }
  function getElement() {
    return element2;
  }
  function div_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      element2 = $$value;
      $$invalidate(5, element2);
    });
  }
  $$self.$$set = ($$new_props) => {
    $$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
    $$invalidate(12, $$restProps = compute_rest_props($$props, omit_props_names));
    if ("use" in $$new_props)
      $$invalidate(0, use = $$new_props.use);
    if ("class" in $$new_props)
      $$invalidate(1, className = $$new_props.class);
    if ("segments" in $$new_props)
      $$invalidate(2, segments = $$new_props.segments);
    if ("key" in $$new_props)
      $$invalidate(3, key = $$new_props.key);
    if ("singleSelect" in $$new_props)
      $$invalidate(4, singleSelect = $$new_props.singleSelect);
    if ("selected" in $$new_props)
      $$invalidate(13, selected = $$new_props.selected);
    if ("$$scope" in $$new_props)
      $$invalidate(19, $$scope = $$new_props.$$scope);
  };
  $$self.$capture_state = () => ({
    MDCSegmentedButtonFoundation,
    onMount,
    setContext,
    writable,
    get_current_component,
    forwardEventsBuilder,
    classMap,
    useActions,
    dispatch,
    ContextFragment: ContextFragment_default,
    forwardEvents,
    use,
    className,
    segments,
    key,
    singleSelect,
    selected,
    element: element2,
    instance,
    segmentAccessorMap,
    segmentAccessorWeakMap,
    initialSelected,
    singleSelectStore,
    previousSelected,
    setDifference,
    handleSegmentMount,
    handleSegmentUnmount,
    handleSelected,
    getAccessor,
    addAccessor,
    removeAccessor,
    selectSegment,
    unselectSegment,
    getElement,
    $singleSelectStore
  });
  $$self.$inject_state = ($$new_props) => {
    if ("use" in $$props)
      $$invalidate(0, use = $$new_props.use);
    if ("className" in $$props)
      $$invalidate(1, className = $$new_props.className);
    if ("segments" in $$props)
      $$invalidate(2, segments = $$new_props.segments);
    if ("key" in $$props)
      $$invalidate(3, key = $$new_props.key);
    if ("singleSelect" in $$props)
      $$invalidate(4, singleSelect = $$new_props.singleSelect);
    if ("selected" in $$props)
      $$invalidate(13, selected = $$new_props.selected);
    if ("element" in $$props)
      $$invalidate(5, element2 = $$new_props.element);
    if ("instance" in $$props)
      $$invalidate(15, instance = $$new_props.instance);
    if ("segmentAccessorMap" in $$props)
      segmentAccessorMap = $$new_props.segmentAccessorMap;
    if ("segmentAccessorWeakMap" in $$props)
      segmentAccessorWeakMap = $$new_props.segmentAccessorWeakMap;
    if ("initialSelected" in $$props)
      $$invalidate(7, initialSelected = $$new_props.initialSelected);
    if ("previousSelected" in $$props)
      $$invalidate(16, previousSelected = $$new_props.previousSelected);
  };
  if ($$props && "$$inject" in $$props) {
    $$self.$inject_state($$props.$$inject);
  }
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*singleSelect*/
    16) {
      $:
        set_store_value(singleSelectStore, $singleSelectStore = singleSelect, $singleSelectStore);
    }
    if ($$self.$$.dirty & /*instance, singleSelect, previousSelected, selected*/
    106512) {
      $:
        if (instance && singleSelect && previousSelected !== selected) {
          if (previousSelected != null) {
            instance.unselectSegment(previousSelected);
          }
          $$invalidate(16, previousSelected = selected);
          if (selected != null) {
            instance.selectSegment(selected);
          }
        }
    }
    if ($$self.$$.dirty & /*instance, singleSelect, selected, previousSelected, segments*/
    106516) {
      $:
        if (instance && !singleSelect) {
          const setSelected = new Set(selected);
          const unSelected = setDifference(previousSelected, setSelected);
          const newSelected = setDifference(setSelected, previousSelected);
          if (unSelected.size || newSelected.size) {
            $$invalidate(16, previousSelected = setSelected);
            for (let segmentId of unSelected) {
              const idx = segments.indexOf(segmentId);
              if (idx !== -1) {
                instance.unselectSegment(idx);
              }
            }
            for (let segmentId of newSelected) {
              instance.selectSegment(segments.indexOf(segmentId));
            }
          }
        }
    }
  };
  return [
    use,
    className,
    segments,
    key,
    singleSelect,
    element2,
    forwardEvents,
    initialSelected,
    singleSelectStore,
    handleSegmentMount,
    handleSegmentUnmount,
    handleSelected,
    $$restProps,
    selected,
    getElement,
    instance,
    previousSelected,
    slots,
    div_binding,
    $$scope
  ];
}
var SegmentedButton = class extends SvelteComponentDev {
  constructor(options) {
    super(options);
    init(this, options, instance_1, create_fragment, safe_not_equal, {
      use: 0,
      class: 1,
      segments: 2,
      key: 3,
      singleSelect: 4,
      selected: 13,
      getElement: 14
    });
    dispatch_dev("SvelteRegisterComponent", {
      component: this,
      tagName: "SegmentedButton",
      options,
      id: create_fragment.name
    });
  }
  get use() {
    throw new Error("<SegmentedButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set use(value) {
    throw new Error("<SegmentedButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get class() {
    throw new Error("<SegmentedButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set class(value) {
    throw new Error("<SegmentedButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get segments() {
    throw new Error("<SegmentedButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set segments(value) {
    throw new Error("<SegmentedButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get key() {
    throw new Error("<SegmentedButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set key(value) {
    throw new Error("<SegmentedButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get singleSelect() {
    throw new Error("<SegmentedButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set singleSelect(value) {
    throw new Error("<SegmentedButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get selected() {
    throw new Error("<SegmentedButton>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set selected(value) {
    throw new Error("<SegmentedButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get getElement() {
    return this.$$.ctx[14];
  }
  set getElement(value) {
    throw new Error("<SegmentedButton>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
};
var SegmentedButton_default = SegmentedButton;

// node_modules/@smui/segmented-button/dist/Segment.svelte
var { Error: Error_1 } = globals;
var file2 = "node_modules/@smui/segmented-button/dist/Segment.svelte";
function create_if_block_1(ctx) {
  let div;
  const block = {
    c: function create() {
      div = element("div");
      this.h();
    },
    l: function claim(nodes) {
      div = claim_element(nodes, "DIV", { class: true });
      children(div).forEach(detach_dev);
      this.h();
    },
    h: function hydrate() {
      attr_dev(div, "class", "mdc-segmented-button__ripple");
      add_location(div, file2, 32, 15, 894);
    },
    m: function mount(target, anchor) {
      insert_hydration_dev(target, div, anchor);
    },
    d: function destroy(detaching) {
      if (detaching) {
        detach_dev(div);
      }
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_if_block_1.name,
    type: "if",
    source: "(33:3) {#if ripple}",
    ctx
  });
  return block;
}
function create_if_block(ctx) {
  let div;
  const block = {
    c: function create() {
      div = element("div");
      this.h();
    },
    l: function claim(nodes) {
      div = claim_element(nodes, "DIV", { class: true });
      children(div).forEach(detach_dev);
      this.h();
    },
    h: function hydrate() {
      attr_dev(div, "class", "mdc-segmented-button__segment__touch");
      add_location(div, file2, 33, 15, 964);
    },
    m: function mount(target, anchor) {
      insert_hydration_dev(target, div, anchor);
    },
    d: function destroy(detaching) {
      if (detaching) {
        detach_dev(div);
      }
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_if_block.name,
    type: "if",
    source: "(34:4) {#if touch}",
    ctx
  });
  return block;
}
function create_fragment2(ctx) {
  let button;
  let if_block0_anchor;
  let button_class_value;
  let button_style_value;
  let button_role_value;
  let button_aria_pressed_value;
  let button_aria_checked_value;
  let Ripple_action;
  let forwardEvents_action;
  let useActions_action;
  let current;
  let mounted;
  let dispose;
  let if_block0 = (
    /*ripple*/
    ctx[4] && create_if_block_1(ctx)
  );
  const default_slot_template = (
    /*#slots*/
    ctx[23].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[22],
    null
  );
  let if_block1 = (
    /*touch*/
    ctx[5] && create_if_block(ctx)
  );
  let button_levels = [
    {
      class: button_class_value = classMap({
        [
          /*className*/
          ctx[2]
        ]: true,
        "mdc-segmented-button__segment": true,
        "mdc-segmented-button__segment--touch": (
          /*touch*/
          ctx[5]
        ),
        "mdc-segmented-button__segment--selected": (
          /*selected*/
          ctx[0]
        ),
        .../*internalClasses*/
        ctx[8]
      })
    },
    {
      style: button_style_value = Object.entries(
        /*internalStyles*/
        ctx[9]
      ).map(func).concat([
        /*style*/
        ctx[3]
      ]).join(" ")
    },
    {
      role: button_role_value = /*singleSelect*/
      ctx[14] ? "radio" : void 0
    },
    {
      "aria-pressed": button_aria_pressed_value = !/*singleSelect*/
      ctx[14] ? (
        /*selected*/
        ctx[0] ? "true" : "false"
      ) : void 0
    },
    {
      "aria-checked": button_aria_checked_value = /*singleSelect*/
      ctx[14] ? (
        /*selected*/
        ctx[0] ? "true" : "false"
      ) : void 0
    },
    /*internalAttrs*/
    ctx[10],
    /*$$restProps*/
    ctx[19]
  ];
  let button_data = {};
  for (let i = 0; i < button_levels.length; i += 1) {
    button_data = assign(button_data, button_levels[i]);
  }
  const block = {
    c: function create() {
      button = element("button");
      if (if_block0)
        if_block0.c();
      if_block0_anchor = empty();
      if (default_slot)
        default_slot.c();
      if (if_block1)
        if_block1.c();
      this.h();
    },
    l: function claim(nodes) {
      button = claim_element(nodes, "BUTTON", {
        class: true,
        style: true,
        role: true,
        "aria-pressed": true,
        "aria-checked": true
      });
      var button_nodes = children(button);
      if (if_block0)
        if_block0.l(button_nodes);
      if_block0_anchor = empty();
      if (default_slot)
        default_slot.l(button_nodes);
      if (if_block1)
        if_block1.l(button_nodes);
      button_nodes.forEach(detach_dev);
      this.h();
    },
    h: function hydrate() {
      set_attributes(button, button_data);
      add_location(button, file2, 0, 0, 0);
    },
    m: function mount(target, anchor) {
      insert_hydration_dev(target, button, anchor);
      if (if_block0)
        if_block0.m(button, null);
      append_hydration_dev(button, if_block0_anchor);
      if (default_slot) {
        default_slot.m(button, null);
      }
      if (if_block1)
        if_block1.m(button, null);
      if (button.autofocus)
        button.focus();
      ctx[24](button);
      current = true;
      if (!mounted) {
        dispose = [
          action_destroyer(Ripple_action = dist_default.call(null, button, {
            ripple: (
              /*ripple*/
              ctx[4]
            ),
            unbounded: false,
            addClass: (
              /*addClass*/
              ctx[16]
            ),
            removeClass: (
              /*removeClass*/
              ctx[17]
            ),
            addStyle: (
              /*addStyle*/
              ctx[18]
            )
          })),
          action_destroyer(forwardEvents_action = /*forwardEvents*/
          ctx[11].call(null, button)),
          action_destroyer(useActions_action = useActions.call(
            null,
            button,
            /*use*/
            ctx[1]
          )),
          listen_dev(
            button,
            "click",
            /*click_handler*/
            ctx[25],
            false,
            false,
            false,
            false
          )
        ];
        mounted = true;
      }
    },
    p: function update(ctx2, dirty) {
      if (
        /*ripple*/
        ctx2[4]
      ) {
        if (if_block0) {
        } else {
          if_block0 = create_if_block_1(ctx2);
          if_block0.c();
          if_block0.m(button, if_block0_anchor);
        }
      } else if (if_block0) {
        if_block0.d(1);
        if_block0 = null;
      }
      if (default_slot) {
        if (default_slot.p && (!current || dirty[0] & /*$$scope*/
        4194304)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[22],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[22]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[22],
              dirty,
              null
            ),
            null
          );
        }
      }
      if (
        /*touch*/
        ctx2[5]
      ) {
        if (if_block1) {
        } else {
          if_block1 = create_if_block(ctx2);
          if_block1.c();
          if_block1.m(button, null);
        }
      } else if (if_block1) {
        if_block1.d(1);
        if_block1 = null;
      }
      set_attributes(button, button_data = get_spread_update(button_levels, [
        (!current || dirty[0] & /*className, touch, selected, internalClasses*/
        293 && button_class_value !== (button_class_value = classMap({
          [
            /*className*/
            ctx2[2]
          ]: true,
          "mdc-segmented-button__segment": true,
          "mdc-segmented-button__segment--touch": (
            /*touch*/
            ctx2[5]
          ),
          "mdc-segmented-button__segment--selected": (
            /*selected*/
            ctx2[0]
          ),
          .../*internalClasses*/
          ctx2[8]
        }))) && { class: button_class_value },
        (!current || dirty[0] & /*internalStyles, style*/
        520 && button_style_value !== (button_style_value = Object.entries(
          /*internalStyles*/
          ctx2[9]
        ).map(func).concat([
          /*style*/
          ctx2[3]
        ]).join(" "))) && { style: button_style_value },
        { role: button_role_value },
        (!current || dirty[0] & /*selected*/
        1 && button_aria_pressed_value !== (button_aria_pressed_value = !/*singleSelect*/
        ctx2[14] ? (
          /*selected*/
          ctx2[0] ? "true" : "false"
        ) : void 0)) && {
          "aria-pressed": button_aria_pressed_value
        },
        (!current || dirty[0] & /*selected*/
        1 && button_aria_checked_value !== (button_aria_checked_value = /*singleSelect*/
        ctx2[14] ? (
          /*selected*/
          ctx2[0] ? "true" : "false"
        ) : void 0)) && {
          "aria-checked": button_aria_checked_value
        },
        dirty[0] & /*internalAttrs*/
        1024 && /*internalAttrs*/
        ctx2[10],
        dirty[0] & /*$$restProps*/
        524288 && /*$$restProps*/
        ctx2[19]
      ]));
      if (Ripple_action && is_function(Ripple_action.update) && dirty[0] & /*ripple*/
      16)
        Ripple_action.update.call(null, {
          ripple: (
            /*ripple*/
            ctx2[4]
          ),
          unbounded: false,
          addClass: (
            /*addClass*/
            ctx2[16]
          ),
          removeClass: (
            /*removeClass*/
            ctx2[17]
          ),
          addStyle: (
            /*addStyle*/
            ctx2[18]
          )
        });
      if (useActions_action && is_function(useActions_action.update) && dirty[0] & /*use*/
      2)
        useActions_action.update.call(
          null,
          /*use*/
          ctx2[1]
        );
    },
    i: function intro(local) {
      if (current)
        return;
      transition_in(default_slot, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(default_slot, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching) {
        detach_dev(button);
      }
      if (if_block0)
        if_block0.d();
      if (default_slot)
        default_slot.d(detaching);
      if (if_block1)
        if_block1.d();
      ctx[24](null);
      mounted = false;
      run_all(dispose);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_fragment2.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
var func = ([name, value]) => `${name}: ${value};`;
function instance_12($$self, $$props, $$invalidate) {
  const omit_props_names = ["use", "class", "style", "segment", "ripple", "touch", "selected", "getElement"];
  let $$restProps = compute_rest_props($$props, omit_props_names);
  let $index;
  let $singleSelect;
  let $initialSelectedStore;
  let { $$slots: slots = {}, $$scope } = $$props;
  validate_slots("Segment", slots, ["default"]);
  const forwardEvents = forwardEventsBuilder(get_current_component());
  let uninitializedValue = () => {
  };
  function isUninitializedValue(value) {
    return value === uninitializedValue;
  }
  let { use = [] } = $$props;
  let { class: className = "" } = $$props;
  let { style = "" } = $$props;
  let { segment: segmentId } = $$props;
  let { ripple = true } = $$props;
  let { touch = false } = $$props;
  const initialSelectedStore = getContext("SMUI:segmented-button:segment:initialSelected");
  validate_store(initialSelectedStore, "initialSelectedStore");
  component_subscribe($$self, initialSelectedStore, (value) => $$invalidate(28, $initialSelectedStore = value));
  let { selected = uninitializedValue } = $$props;
  let manualSelection = !isUninitializedValue(selected);
  if (isUninitializedValue(selected)) {
    selected = $initialSelectedStore;
  }
  let element2;
  let instance;
  let internalClasses = {};
  let internalStyles = {};
  let internalAttrs = {};
  const singleSelect = getContext("SMUI:segmented-button:singleSelect");
  validate_store(singleSelect, "singleSelect");
  component_subscribe($$self, singleSelect, (value) => $$invalidate(27, $singleSelect = value));
  const index = getContext("SMUI:segmented-button:segment:index");
  validate_store(index, "index");
  component_subscribe($$self, index, (value) => $$invalidate(26, $index = value));
  if (!segmentId) {
    throw new Error("The segment property is required! It should be passed down from the SegmentedButton to the Segment.");
  }
  onMount(() => {
    $$invalidate(6, instance = new MDCSegmentedButtonSegmentFoundation({
      isSingleSelect: () => {
        return $singleSelect;
      },
      getAttr,
      setAttr: addAttr,
      addClass,
      removeClass,
      hasClass,
      notifySelectedChange: (value) => {
        $$invalidate(0, selected = value);
        dispatch(getElement(), "selected", { index: $index, selected, segmentId });
      },
      getRootBoundingClientRect: () => {
        return getElement().getBoundingClientRect();
      }
    }));
    const accessor = {
      segmentId,
      get selected() {
        return selected;
      },
      set selected(value) {
        if (selected !== value) {
          $$invalidate(0, selected = value);
        }
      }
    };
    dispatch(getElement(), "SMUISegmentedButtonSegment:mount", accessor);
    instance.init();
    return () => {
      dispatch(getElement(), "SMUISegmentedButtonSegment:unmount", accessor);
      instance.destroy();
    };
  });
  function hasClass(className2) {
    return className2 in internalClasses ? internalClasses[className2] : getElement().classList.contains(className2);
  }
  function addClass(className2) {
    if (!internalClasses[className2]) {
      $$invalidate(8, internalClasses[className2] = true, internalClasses);
    }
  }
  function removeClass(className2) {
    if (!(className2 in internalClasses) || internalClasses[className2]) {
      $$invalidate(8, internalClasses[className2] = false, internalClasses);
    }
  }
  function getAttr(name) {
    var _a;
    return name in internalAttrs ? (_a = internalAttrs[name]) !== null && _a !== void 0 ? _a : null : getElement().getAttribute(name);
  }
  function addAttr(name, value) {
    if (internalAttrs[name] !== value) {
      $$invalidate(10, internalAttrs[name] = value, internalAttrs);
    }
  }
  function addStyle(name, value) {
    if (internalStyles[name] != value) {
      if (value === "" || value == null) {
        delete internalStyles[name];
        $$invalidate(9, internalStyles);
      } else {
        $$invalidate(9, internalStyles[name] = value, internalStyles);
      }
    }
  }
  function getElement() {
    return element2;
  }
  $$self.$$.on_mount.push(function() {
    if (segmentId === void 0 && !("segment" in $$props || $$self.$$.bound[$$self.$$.props["segment"]])) {
      console.warn("<Segment> was created without expected prop 'segment'");
    }
  });
  function button_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      element2 = $$value;
      $$invalidate(7, element2);
    });
  }
  const click_handler = (event) => !event.defaultPrevented && instance && !manualSelection && instance.handleClick();
  $$self.$$set = ($$new_props) => {
    $$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
    $$invalidate(19, $$restProps = compute_rest_props($$props, omit_props_names));
    if ("use" in $$new_props)
      $$invalidate(1, use = $$new_props.use);
    if ("class" in $$new_props)
      $$invalidate(2, className = $$new_props.class);
    if ("style" in $$new_props)
      $$invalidate(3, style = $$new_props.style);
    if ("segment" in $$new_props)
      $$invalidate(20, segmentId = $$new_props.segment);
    if ("ripple" in $$new_props)
      $$invalidate(4, ripple = $$new_props.ripple);
    if ("touch" in $$new_props)
      $$invalidate(5, touch = $$new_props.touch);
    if ("selected" in $$new_props)
      $$invalidate(0, selected = $$new_props.selected);
    if ("$$scope" in $$new_props)
      $$invalidate(22, $$scope = $$new_props.$$scope);
  };
  $$self.$capture_state = () => ({
    MDCSegmentedButtonSegmentFoundation,
    onMount,
    getContext,
    get_current_component,
    forwardEventsBuilder,
    classMap,
    useActions,
    dispatch,
    Ripple: dist_default,
    forwardEvents,
    uninitializedValue,
    isUninitializedValue,
    use,
    className,
    style,
    segmentId,
    ripple,
    touch,
    initialSelectedStore,
    selected,
    manualSelection,
    element: element2,
    instance,
    internalClasses,
    internalStyles,
    internalAttrs,
    singleSelect,
    index,
    hasClass,
    addClass,
    removeClass,
    getAttr,
    addAttr,
    addStyle,
    getElement,
    $index,
    $singleSelect,
    $initialSelectedStore
  });
  $$self.$inject_state = ($$new_props) => {
    if ("uninitializedValue" in $$props)
      uninitializedValue = $$new_props.uninitializedValue;
    if ("use" in $$props)
      $$invalidate(1, use = $$new_props.use);
    if ("className" in $$props)
      $$invalidate(2, className = $$new_props.className);
    if ("style" in $$props)
      $$invalidate(3, style = $$new_props.style);
    if ("segmentId" in $$props)
      $$invalidate(20, segmentId = $$new_props.segmentId);
    if ("ripple" in $$props)
      $$invalidate(4, ripple = $$new_props.ripple);
    if ("touch" in $$props)
      $$invalidate(5, touch = $$new_props.touch);
    if ("selected" in $$props)
      $$invalidate(0, selected = $$new_props.selected);
    if ("manualSelection" in $$props)
      $$invalidate(13, manualSelection = $$new_props.manualSelection);
    if ("element" in $$props)
      $$invalidate(7, element2 = $$new_props.element);
    if ("instance" in $$props)
      $$invalidate(6, instance = $$new_props.instance);
    if ("internalClasses" in $$props)
      $$invalidate(8, internalClasses = $$new_props.internalClasses);
    if ("internalStyles" in $$props)
      $$invalidate(9, internalStyles = $$new_props.internalStyles);
    if ("internalAttrs" in $$props)
      $$invalidate(10, internalAttrs = $$new_props.internalAttrs);
  };
  if ($$props && "$$inject" in $$props) {
    $$self.$inject_state($$props.$$inject);
  }
  $$self.$$.update = () => {
    if ($$self.$$.dirty[0] & /*instance, selected*/
    65) {
      $:
        if (instance && instance.isSelected() && !selected) {
          instance.setUnselected();
        }
    }
    if ($$self.$$.dirty[0] & /*instance, selected*/
    65) {
      $:
        if (instance && !instance.isSelected() && selected) {
          instance.setSelected();
        }
    }
  };
  return [
    selected,
    use,
    className,
    style,
    ripple,
    touch,
    instance,
    element2,
    internalClasses,
    internalStyles,
    internalAttrs,
    forwardEvents,
    initialSelectedStore,
    manualSelection,
    singleSelect,
    index,
    addClass,
    removeClass,
    addStyle,
    $$restProps,
    segmentId,
    getElement,
    $$scope,
    slots,
    button_binding,
    click_handler
  ];
}
var Segment = class extends SvelteComponentDev {
  constructor(options) {
    super(options);
    init(
      this,
      options,
      instance_12,
      create_fragment2,
      safe_not_equal,
      {
        use: 1,
        class: 2,
        style: 3,
        segment: 20,
        ripple: 4,
        touch: 5,
        selected: 0,
        getElement: 21
      },
      null,
      [-1, -1]
    );
    dispatch_dev("SvelteRegisterComponent", {
      component: this,
      tagName: "Segment",
      options,
      id: create_fragment2.name
    });
  }
  get use() {
    throw new Error_1("<Segment>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set use(value) {
    throw new Error_1("<Segment>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get class() {
    throw new Error_1("<Segment>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set class(value) {
    throw new Error_1("<Segment>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get style() {
    throw new Error_1("<Segment>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set style(value) {
    throw new Error_1("<Segment>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get segment() {
    throw new Error_1("<Segment>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set segment(value) {
    throw new Error_1("<Segment>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get ripple() {
    throw new Error_1("<Segment>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set ripple(value) {
    throw new Error_1("<Segment>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get touch() {
    throw new Error_1("<Segment>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set touch(value) {
    throw new Error_1("<Segment>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get selected() {
    throw new Error_1("<Segment>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set selected(value) {
    throw new Error_1("<Segment>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get getElement() {
    return this.$$.ctx[21];
  }
  set getElement(value) {
    throw new Error_1("<Segment>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
};
var Segment_default = Segment;

// node_modules/@smui/segmented-button/dist/index.js
var dist_default2 = SegmentedButton_default;
export {
  CommonIcon_default as Icon,
  CommonLabel_default as Label,
  Segment_default as Segment,
  dist_default2 as default
};
/*! Bundled license information:

@smui/segmented-button/dist/mdc-segmented-button/segmented-button/adapter.js:
  (**
   * @license
   * Copyright 2020 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/base/types.js:
  (**
   * @license
   * Copyright 2019 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/base/index.js:
  (**
   * @license
   * Copyright 2019 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@smui/segmented-button/dist/mdc-segmented-button/segmented-button/constants.js:
  (**
   * @license
   * Copyright 2020 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@smui/segmented-button/dist/mdc-segmented-button/segmented-button/foundation.js:
  (**
   * @license
   * Copyright 2020 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@smui/segmented-button/dist/mdc-segmented-button/segment/constants.js:
  (**
   * @license
   * Copyright 2020 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@smui/segmented-button/dist/mdc-segmented-button/segment/foundation.js:
  (**
   * @license
   * Copyright 2020 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@smui/segmented-button/dist/mdc-segmented-button/segment/component.js:
  (**
   * @license
   * Copyright 2020 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@smui/segmented-button/dist/mdc-segmented-button/segmented-button/component.js:
  (**
   * @license
   * Copyright 2020 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@smui/segmented-button/dist/mdc-segmented-button/segmented-button/index.js:
  (**
   * @license
   * Copyright 2020 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@smui/segmented-button/dist/mdc-segmented-button/segment/adapter.js:
  (**
   * @license
   * Copyright 2020 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@smui/segmented-button/dist/mdc-segmented-button/segment/index.js:
  (**
   * @license
   * Copyright 2020 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@smui/segmented-button/dist/mdc-segmented-button/types.js:
  (**
   * @license
   * Copyright 2020 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@smui/segmented-button/dist/mdc-segmented-button/index.js:
  (**
   * @license
   * Copyright 2020 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)
*/
//# sourceMappingURL=@smui_segmented-button.js.map
