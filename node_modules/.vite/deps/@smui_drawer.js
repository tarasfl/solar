import {
  MDCDismissibleDrawerFoundation,
  MDCModalDrawerFoundation
} from "./chunk-UXVZRY34.js";
import {
  classAdderBuilder
} from "./chunk-MRX7WRPT.js";
import "./chunk-676XXDVG.js";
import {
  SmuiElement_default
} from "./chunk-DVQWFXPQ.js";
import {
  classMap,
  dispatch,
  forwardEventsBuilder,
  useActions
} from "./chunk-DXJYLXNN.js";
import "./chunk-ODRA5LQH.js";
import "./chunk-X43LXICK.js";
import "./chunk-W4OU4FMO.js";
import "./chunk-OYKM6SV3.js";
import {
  focus_trap_exports
} from "./chunk-Y3XZ6UIT.js";
import "./chunk-RFTMRRON.js";
import "./chunk-BT6PLM7B.js";
import "./chunk-ZB6PEJPW.js";
import "./chunk-FBWM3HWJ.js";
import "./chunk-X7HCJ7ZS.js";
import {
  SvelteComponentDev,
  action_destroyer,
  add_location,
  assign,
  binding_callbacks,
  check_outros,
  children,
  claim_component,
  claim_element,
  compute_rest_props,
  construct_svelte_component_dev,
  create_component,
  create_slot,
  destroy_component,
  detach_dev,
  dispatch_dev,
  element,
  empty,
  exclude_internal_props,
  get_all_dirty_from_scope,
  get_current_component,
  get_slot_changes,
  get_spread_object,
  get_spread_update,
  group_outros,
  init,
  insert_hydration_dev,
  is_function,
  listen_dev,
  mount_component,
  onDestroy,
  onMount,
  run_all,
  safe_not_equal,
  setContext,
  set_attributes,
  transition_in,
  transition_out,
  update_slot_base,
  validate_slots
} from "./chunk-NMMN3PC6.js";
import "./chunk-4DGM7FRE.js";
import "./chunk-7U33LM2Z.js";

// node_modules/@smui/drawer/dist/Drawer.svelte
var file = "node_modules/@smui/drawer/dist/Drawer.svelte";
function create_fragment(ctx) {
  let aside;
  let aside_class_value;
  let useActions_action;
  let forwardEvents_action;
  let current;
  let mounted;
  let dispose;
  const default_slot_template = (
    /*#slots*/
    ctx[15].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[14],
    null
  );
  let aside_levels = [
    {
      class: aside_class_value = classMap({
        [
          /*className*/
          ctx[1]
        ]: true,
        "mdc-drawer": true,
        "mdc-drawer--dismissible": (
          /*variant*/
          ctx[2] === "dismissible"
        ),
        "mdc-drawer--modal": (
          /*variant*/
          ctx[2] === "modal"
        ),
        "smui-drawer__absolute": (
          /*variant*/
          ctx[2] === "modal" && !/*fixed*/
          ctx[3]
        ),
        .../*internalClasses*/
        ctx[6]
      })
    },
    /*$$restProps*/
    ctx[8]
  ];
  let aside_data = {};
  for (let i = 0; i < aside_levels.length; i += 1) {
    aside_data = assign(aside_data, aside_levels[i]);
  }
  const block = {
    c: function create() {
      aside = element("aside");
      if (default_slot)
        default_slot.c();
      this.h();
    },
    l: function claim(nodes) {
      aside = claim_element(nodes, "ASIDE", { class: true });
      var aside_nodes = children(aside);
      if (default_slot)
        default_slot.l(aside_nodes);
      aside_nodes.forEach(detach_dev);
      this.h();
    },
    h: function hydrate() {
      set_attributes(aside, aside_data);
      add_location(aside, file, 0, 0, 0);
    },
    m: function mount(target, anchor) {
      insert_hydration_dev(target, aside, anchor);
      if (default_slot) {
        default_slot.m(aside, null);
      }
      ctx[16](aside);
      current = true;
      if (!mounted) {
        dispose = [
          action_destroyer(useActions_action = useActions.call(
            null,
            aside,
            /*use*/
            ctx[0]
          )),
          action_destroyer(forwardEvents_action = /*forwardEvents*/
          ctx[7].call(null, aside)),
          listen_dev(
            aside,
            "keydown",
            function() {
              if (is_function(
                /*instance*/
                ctx[4] && /*instance*/
                ctx[4].handleKeydown.bind(
                  /*instance*/
                  ctx[4]
                )
              ))
                /*instance*/
                (ctx[4] && /*instance*/
                ctx[4].handleKeydown.bind(
                  /*instance*/
                  ctx[4]
                )).apply(this, arguments);
            },
            false,
            false,
            false,
            false
          ),
          listen_dev(
            aside,
            "transitionend",
            function() {
              if (is_function(
                /*instance*/
                ctx[4] && /*instance*/
                ctx[4].handleTransitionEnd.bind(
                  /*instance*/
                  ctx[4]
                )
              ))
                /*instance*/
                (ctx[4] && /*instance*/
                ctx[4].handleTransitionEnd.bind(
                  /*instance*/
                  ctx[4]
                )).apply(this, arguments);
            },
            false,
            false,
            false,
            false
          )
        ];
        mounted = true;
      }
    },
    p: function update(new_ctx, [dirty]) {
      ctx = new_ctx;
      if (default_slot) {
        if (default_slot.p && (!current || dirty & /*$$scope*/
        16384)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx,
            /*$$scope*/
            ctx[14],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx[14]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx[14],
              dirty,
              null
            ),
            null
          );
        }
      }
      set_attributes(aside, aside_data = get_spread_update(aside_levels, [
        (!current || dirty & /*className, variant, fixed, internalClasses*/
        78 && aside_class_value !== (aside_class_value = classMap({
          [
            /*className*/
            ctx[1]
          ]: true,
          "mdc-drawer": true,
          "mdc-drawer--dismissible": (
            /*variant*/
            ctx[2] === "dismissible"
          ),
          "mdc-drawer--modal": (
            /*variant*/
            ctx[2] === "modal"
          ),
          "smui-drawer__absolute": (
            /*variant*/
            ctx[2] === "modal" && !/*fixed*/
            ctx[3]
          ),
          .../*internalClasses*/
          ctx[6]
        }))) && { class: aside_class_value },
        dirty & /*$$restProps*/
        256 && /*$$restProps*/
        ctx[8]
      ]));
      if (useActions_action && is_function(useActions_action.update) && dirty & /*use*/
      1)
        useActions_action.update.call(
          null,
          /*use*/
          ctx[0]
        );
    },
    i: function intro(local) {
      if (current)
        return;
      transition_in(default_slot, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(default_slot, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching) {
        detach_dev(aside);
      }
      if (default_slot)
        default_slot.d(detaching);
      ctx[16](null);
      mounted = false;
      run_all(dispose);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_fragment.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function instance_1($$self, $$props, $$invalidate) {
  const omit_props_names = ["use", "class", "variant", "open", "fixed", "setOpen", "isOpen", "getElement"];
  let $$restProps = compute_rest_props($$props, omit_props_names);
  let { $$slots: slots = {}, $$scope } = $$props;
  validate_slots("Drawer", slots, ["default"]);
  const { FocusTrap } = focus_trap_exports;
  const forwardEvents = forwardEventsBuilder(get_current_component());
  let { use = [] } = $$props;
  let { class: className = "" } = $$props;
  let { variant = void 0 } = $$props;
  let { open = false } = $$props;
  let { fixed = true } = $$props;
  let element2;
  let instance2 = void 0;
  let internalClasses = {};
  let previousFocus = null;
  let focusTrap;
  let scrim = false;
  setContext("SMUI:list:nav", true);
  setContext("SMUI:list:item:nav", true);
  setContext("SMUI:list:wrapFocus", true);
  let oldVariant = variant;
  onMount(() => {
    focusTrap = new FocusTrap(
      element2,
      {
        // Component handles focusing on active nav item.
        skipInitialFocus: true
      }
    );
    $$invalidate(4, instance2 = getInstance());
    instance2 && instance2.init();
  });
  onDestroy(() => {
    instance2 && instance2.destroy();
    scrim && scrim.removeEventListener("SMUIDrawerScrim:click", handleScrimClick);
  });
  function getInstance() {
    var _a, _b;
    if (scrim) {
      scrim.removeEventListener("SMUIDrawerScrim:click", handleScrimClick);
    }
    if (variant === "modal") {
      scrim = (_b = (_a = element2.parentNode) === null || _a === void 0 ? void 0 : _a.querySelector(".mdc-drawer-scrim")) !== null && _b !== void 0 ? _b : false;
      if (scrim) {
        scrim.addEventListener("SMUIDrawerScrim:click", handleScrimClick);
      }
    }
    const Foundation = variant === "dismissible" ? MDCDismissibleDrawerFoundation : variant === "modal" ? MDCModalDrawerFoundation : void 0;
    return Foundation ? new Foundation({
      addClass,
      removeClass,
      hasClass,
      elementHasClass: (element3, className2) => element3.classList.contains(className2),
      saveFocus: () => previousFocus = document.activeElement,
      restoreFocus: () => {
        if (previousFocus && "focus" in previousFocus && element2.contains(document.activeElement)) {
          previousFocus.focus();
        }
      },
      focusActiveNavigationItem: () => {
        const activeNavItemEl = element2.querySelector(".mdc-list-item--activated,.mdc-deprecated-list-item--activated");
        if (activeNavItemEl) {
          activeNavItemEl.focus();
        }
      },
      notifyClose: () => {
        $$invalidate(9, open = false);
        dispatch(element2, "SMUIDrawer:closed", void 0, void 0, true);
      },
      notifyOpen: () => {
        $$invalidate(9, open = true);
        dispatch(element2, "SMUIDrawer:opened", void 0, void 0, true);
      },
      trapFocus: () => focusTrap.trapFocus(),
      releaseFocus: () => focusTrap.releaseFocus()
    }) : void 0;
  }
  function hasClass(className2) {
    return className2 in internalClasses ? internalClasses[className2] : getElement().classList.contains(className2);
  }
  function addClass(className2) {
    if (!internalClasses[className2]) {
      $$invalidate(6, internalClasses[className2] = true, internalClasses);
    }
  }
  function removeClass(className2) {
    if (!(className2 in internalClasses) || internalClasses[className2]) {
      $$invalidate(6, internalClasses[className2] = false, internalClasses);
    }
  }
  function handleScrimClick() {
    instance2 && "handleScrimClick" in instance2 && instance2.handleScrimClick();
  }
  function setOpen(value) {
    $$invalidate(9, open = value);
  }
  function isOpen() {
    return open;
  }
  function getElement() {
    return element2;
  }
  function aside_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      element2 = $$value;
      $$invalidate(5, element2);
    });
  }
  $$self.$$set = ($$new_props) => {
    $$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
    $$invalidate(8, $$restProps = compute_rest_props($$props, omit_props_names));
    if ("use" in $$new_props)
      $$invalidate(0, use = $$new_props.use);
    if ("class" in $$new_props)
      $$invalidate(1, className = $$new_props.class);
    if ("variant" in $$new_props)
      $$invalidate(2, variant = $$new_props.variant);
    if ("open" in $$new_props)
      $$invalidate(9, open = $$new_props.open);
    if ("fixed" in $$new_props)
      $$invalidate(3, fixed = $$new_props.fixed);
    if ("$$scope" in $$new_props)
      $$invalidate(14, $$scope = $$new_props.$$scope);
  };
  $$self.$capture_state = () => ({
    MDCDismissibleDrawerFoundation,
    MDCModalDrawerFoundation,
    domFocusTrap: focus_trap_exports,
    onMount,
    onDestroy,
    setContext,
    get_current_component,
    forwardEventsBuilder,
    classMap,
    useActions,
    dispatch,
    FocusTrap,
    forwardEvents,
    use,
    className,
    variant,
    open,
    fixed,
    element: element2,
    instance: instance2,
    internalClasses,
    previousFocus,
    focusTrap,
    scrim,
    oldVariant,
    getInstance,
    hasClass,
    addClass,
    removeClass,
    handleScrimClick,
    setOpen,
    isOpen,
    getElement
  });
  $$self.$inject_state = ($$new_props) => {
    if ("use" in $$props)
      $$invalidate(0, use = $$new_props.use);
    if ("className" in $$props)
      $$invalidate(1, className = $$new_props.className);
    if ("variant" in $$props)
      $$invalidate(2, variant = $$new_props.variant);
    if ("open" in $$props)
      $$invalidate(9, open = $$new_props.open);
    if ("fixed" in $$props)
      $$invalidate(3, fixed = $$new_props.fixed);
    if ("element" in $$props)
      $$invalidate(5, element2 = $$new_props.element);
    if ("instance" in $$props)
      $$invalidate(4, instance2 = $$new_props.instance);
    if ("internalClasses" in $$props)
      $$invalidate(6, internalClasses = $$new_props.internalClasses);
    if ("previousFocus" in $$props)
      previousFocus = $$new_props.previousFocus;
    if ("focusTrap" in $$props)
      focusTrap = $$new_props.focusTrap;
    if ("scrim" in $$props)
      scrim = $$new_props.scrim;
    if ("oldVariant" in $$props)
      $$invalidate(13, oldVariant = $$new_props.oldVariant);
  };
  if ($$props && "$$inject" in $$props) {
    $$self.$inject_state($$props.$$inject);
  }
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*oldVariant, variant, instance*/
    8212) {
      $:
        if (oldVariant !== variant) {
          $$invalidate(13, oldVariant = variant);
          instance2 && instance2.destroy();
          $$invalidate(6, internalClasses = {});
          $$invalidate(4, instance2 = getInstance());
          instance2 && instance2.init();
        }
    }
    if ($$self.$$.dirty & /*instance, open*/
    528) {
      $:
        if (instance2 && instance2.isOpen() !== open) {
          if (open) {
            instance2.open();
          } else {
            instance2.close();
          }
        }
    }
  };
  return [
    use,
    className,
    variant,
    fixed,
    instance2,
    element2,
    internalClasses,
    forwardEvents,
    $$restProps,
    open,
    setOpen,
    isOpen,
    getElement,
    oldVariant,
    $$scope,
    slots,
    aside_binding
  ];
}
var Drawer = class extends SvelteComponentDev {
  constructor(options) {
    super(options);
    init(this, options, instance_1, create_fragment, safe_not_equal, {
      use: 0,
      class: 1,
      variant: 2,
      open: 9,
      fixed: 3,
      setOpen: 10,
      isOpen: 11,
      getElement: 12
    });
    dispatch_dev("SvelteRegisterComponent", {
      component: this,
      tagName: "Drawer",
      options,
      id: create_fragment.name
    });
  }
  get use() {
    throw new Error("<Drawer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set use(value) {
    throw new Error("<Drawer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get class() {
    throw new Error("<Drawer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set class(value) {
    throw new Error("<Drawer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get variant() {
    throw new Error("<Drawer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set variant(value) {
    throw new Error("<Drawer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get open() {
    throw new Error("<Drawer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set open(value) {
    throw new Error("<Drawer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get fixed() {
    throw new Error("<Drawer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set fixed(value) {
    throw new Error("<Drawer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get setOpen() {
    return this.$$.ctx[10];
  }
  set setOpen(value) {
    throw new Error("<Drawer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get isOpen() {
    return this.$$.ctx[11];
  }
  set isOpen(value) {
    throw new Error("<Drawer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get getElement() {
    return this.$$.ctx[12];
  }
  set getElement(value) {
    throw new Error("<Drawer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
};
var Drawer_default = Drawer;

// node_modules/@smui/drawer/dist/AppContent.js
var AppContent_default = classAdderBuilder({
  class: "mdc-drawer-app-content",
  tag: "div"
});

// node_modules/@smui/drawer/dist/Content.js
var Content_default = classAdderBuilder({
  class: "mdc-drawer__content",
  tag: "div"
});

// node_modules/@smui/drawer/dist/Header.js
var Header_default = classAdderBuilder({
  class: "mdc-drawer__header",
  tag: "div"
});

// node_modules/@smui/drawer/dist/Title.js
var Title_default = classAdderBuilder({
  class: "mdc-drawer__title",
  tag: "h1"
});

// node_modules/@smui/drawer/dist/Subtitle.js
var Subtitle_default = classAdderBuilder({
  class: "mdc-drawer__subtitle",
  tag: "h2"
});

// node_modules/@smui/drawer/dist/Scrim.svelte
function create_default_slot(ctx) {
  let current;
  const default_slot_template = (
    /*#slots*/
    ctx[10].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[12],
    null
  );
  const block = {
    c: function create() {
      if (default_slot)
        default_slot.c();
    },
    l: function claim(nodes) {
      if (default_slot)
        default_slot.l(nodes);
    },
    m: function mount(target, anchor) {
      if (default_slot) {
        default_slot.m(target, anchor);
      }
      current = true;
    },
    p: function update(ctx2, dirty) {
      if (default_slot) {
        if (default_slot.p && (!current || dirty & /*$$scope*/
        4096)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[12],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[12]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[12],
              dirty,
              null
            ),
            null
          );
        }
      }
    },
    i: function intro(local) {
      if (current)
        return;
      transition_in(default_slot, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(default_slot, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (default_slot)
        default_slot.d(detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_default_slot.name,
    type: "slot",
    source: "(1:0) <svelte:component   this={component}   {tag}   bind:this={element}   use={[forwardEvents, ...use]}   class={classMap({     [className]: true,     'mdc-drawer-scrim': true,     'smui-drawer-scrim__absolute': !fixed,   })}   on:click={handleClick}   {...$$restProps} >",
    ctx
  });
  return block;
}
function create_fragment2(ctx) {
  let switch_instance;
  let switch_instance_anchor;
  let current;
  const switch_instance_spread_levels = [
    { tag: (
      /*tag*/
      ctx[4]
    ) },
    {
      use: [
        /*forwardEvents*/
        ctx[6],
        .../*use*/
        ctx[0]
      ]
    },
    {
      class: classMap({
        [
          /*className*/
          ctx[1]
        ]: true,
        "mdc-drawer-scrim": true,
        "smui-drawer-scrim__absolute": !/*fixed*/
        ctx[2]
      })
    },
    /*$$restProps*/
    ctx[8]
  ];
  var switch_value = (
    /*component*/
    ctx[3]
  );
  function switch_props(ctx2, dirty) {
    let switch_instance_props = {
      $$slots: { default: [create_default_slot] },
      $$scope: { ctx: ctx2 }
    };
    if (dirty !== void 0 && dirty & /*tag, forwardEvents, use, className, fixed, $$restProps*/
    343) {
      switch_instance_props = get_spread_update(switch_instance_spread_levels, [
        dirty & /*tag*/
        16 && { tag: (
          /*tag*/
          ctx2[4]
        ) },
        dirty & /*forwardEvents, use*/
        65 && {
          use: [
            /*forwardEvents*/
            ctx2[6],
            .../*use*/
            ctx2[0]
          ]
        },
        dirty & /*className, fixed*/
        6 && {
          class: classMap({
            [
              /*className*/
              ctx2[1]
            ]: true,
            "mdc-drawer-scrim": true,
            "smui-drawer-scrim__absolute": !/*fixed*/
            ctx2[2]
          })
        },
        dirty & /*$$restProps*/
        256 && get_spread_object(
          /*$$restProps*/
          ctx2[8]
        )
      ]);
    } else {
      for (let i = 0; i < switch_instance_spread_levels.length; i += 1) {
        switch_instance_props = assign(switch_instance_props, switch_instance_spread_levels[i]);
      }
    }
    return {
      props: switch_instance_props,
      $$inline: true
    };
  }
  if (switch_value) {
    switch_instance = construct_svelte_component_dev(switch_value, switch_props(ctx));
    ctx[11](switch_instance);
    switch_instance.$on(
      "click",
      /*handleClick*/
      ctx[7]
    );
  }
  const block = {
    c: function create() {
      if (switch_instance)
        create_component(switch_instance.$$.fragment);
      switch_instance_anchor = empty();
    },
    l: function claim(nodes) {
      if (switch_instance)
        claim_component(switch_instance.$$.fragment, nodes);
      switch_instance_anchor = empty();
    },
    m: function mount(target, anchor) {
      if (switch_instance)
        mount_component(switch_instance, target, anchor);
      insert_hydration_dev(target, switch_instance_anchor, anchor);
      current = true;
    },
    p: function update(ctx2, [dirty]) {
      if (dirty & /*component*/
      8 && switch_value !== (switch_value = /*component*/
      ctx2[3])) {
        if (switch_instance) {
          group_outros();
          const old_component = switch_instance;
          transition_out(old_component.$$.fragment, 1, 0, () => {
            destroy_component(old_component, 1);
          });
          check_outros();
        }
        if (switch_value) {
          switch_instance = construct_svelte_component_dev(switch_value, switch_props(ctx2, dirty));
          ctx2[11](switch_instance);
          switch_instance.$on(
            "click",
            /*handleClick*/
            ctx2[7]
          );
          create_component(switch_instance.$$.fragment);
          transition_in(switch_instance.$$.fragment, 1);
          mount_component(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
        } else {
          switch_instance = null;
        }
      } else if (switch_value) {
        const switch_instance_changes = dirty & /*tag, forwardEvents, use, className, fixed, $$restProps*/
        343 ? get_spread_update(switch_instance_spread_levels, [
          dirty & /*tag*/
          16 && { tag: (
            /*tag*/
            ctx2[4]
          ) },
          dirty & /*forwardEvents, use*/
          65 && {
            use: [
              /*forwardEvents*/
              ctx2[6],
              .../*use*/
              ctx2[0]
            ]
          },
          dirty & /*className, fixed*/
          6 && {
            class: classMap({
              [
                /*className*/
                ctx2[1]
              ]: true,
              "mdc-drawer-scrim": true,
              "smui-drawer-scrim__absolute": !/*fixed*/
              ctx2[2]
            })
          },
          dirty & /*$$restProps*/
          256 && get_spread_object(
            /*$$restProps*/
            ctx2[8]
          )
        ]) : {};
        if (dirty & /*$$scope*/
        4096) {
          switch_instance_changes.$$scope = { dirty, ctx: ctx2 };
        }
        switch_instance.$set(switch_instance_changes);
      }
    },
    i: function intro(local) {
      if (current)
        return;
      if (switch_instance)
        transition_in(switch_instance.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      if (switch_instance)
        transition_out(switch_instance.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching) {
        detach_dev(switch_instance_anchor);
      }
      ctx[11](null);
      if (switch_instance)
        destroy_component(switch_instance, detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_fragment2.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function instance($$self, $$props, $$invalidate) {
  const omit_props_names = ["use", "class", "fixed", "component", "tag", "getElement"];
  let $$restProps = compute_rest_props($$props, omit_props_names);
  let { $$slots: slots = {}, $$scope } = $$props;
  validate_slots("Scrim", slots, ["default"]);
  const forwardEvents = forwardEventsBuilder(get_current_component());
  let { use = [] } = $$props;
  let { class: className = "" } = $$props;
  let { fixed = true } = $$props;
  let element2;
  let { component = SmuiElement_default } = $$props;
  let { tag = component === SmuiElement_default ? "div" : void 0 } = $$props;
  function handleClick(event) {
    dispatch(getElement(), "SMUIDrawerScrim:click", event);
  }
  function getElement() {
    return element2.getElement();
  }
  function switch_instance_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      element2 = $$value;
      $$invalidate(5, element2);
    });
  }
  $$self.$$set = ($$new_props) => {
    $$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
    $$invalidate(8, $$restProps = compute_rest_props($$props, omit_props_names));
    if ("use" in $$new_props)
      $$invalidate(0, use = $$new_props.use);
    if ("class" in $$new_props)
      $$invalidate(1, className = $$new_props.class);
    if ("fixed" in $$new_props)
      $$invalidate(2, fixed = $$new_props.fixed);
    if ("component" in $$new_props)
      $$invalidate(3, component = $$new_props.component);
    if ("tag" in $$new_props)
      $$invalidate(4, tag = $$new_props.tag);
    if ("$$scope" in $$new_props)
      $$invalidate(12, $$scope = $$new_props.$$scope);
  };
  $$self.$capture_state = () => ({
    get_current_component,
    forwardEventsBuilder,
    classMap,
    dispatch,
    SmuiElement: SmuiElement_default,
    forwardEvents,
    use,
    className,
    fixed,
    element: element2,
    component,
    tag,
    handleClick,
    getElement
  });
  $$self.$inject_state = ($$new_props) => {
    if ("use" in $$props)
      $$invalidate(0, use = $$new_props.use);
    if ("className" in $$props)
      $$invalidate(1, className = $$new_props.className);
    if ("fixed" in $$props)
      $$invalidate(2, fixed = $$new_props.fixed);
    if ("element" in $$props)
      $$invalidate(5, element2 = $$new_props.element);
    if ("component" in $$props)
      $$invalidate(3, component = $$new_props.component);
    if ("tag" in $$props)
      $$invalidate(4, tag = $$new_props.tag);
  };
  if ($$props && "$$inject" in $$props) {
    $$self.$inject_state($$props.$$inject);
  }
  return [
    use,
    className,
    fixed,
    component,
    tag,
    element2,
    forwardEvents,
    handleClick,
    $$restProps,
    getElement,
    slots,
    switch_instance_binding,
    $$scope
  ];
}
var Scrim = class extends SvelteComponentDev {
  constructor(options) {
    super(options);
    init(this, options, instance, create_fragment2, safe_not_equal, {
      use: 0,
      class: 1,
      fixed: 2,
      component: 3,
      tag: 4,
      getElement: 9
    });
    dispatch_dev("SvelteRegisterComponent", {
      component: this,
      tagName: "Scrim",
      options,
      id: create_fragment2.name
    });
  }
  get use() {
    throw new Error("<Scrim>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set use(value) {
    throw new Error("<Scrim>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get class() {
    throw new Error("<Scrim>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set class(value) {
    throw new Error("<Scrim>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get fixed() {
    throw new Error("<Scrim>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set fixed(value) {
    throw new Error("<Scrim>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get component() {
    throw new Error("<Scrim>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set component(value) {
    throw new Error("<Scrim>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get tag() {
    throw new Error("<Scrim>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set tag(value) {
    throw new Error("<Scrim>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get getElement() {
    return this.$$.ctx[9];
  }
  set getElement(value) {
    throw new Error("<Scrim>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
};
var Scrim_default = Scrim;

// node_modules/@smui/drawer/dist/index.js
var dist_default = Drawer_default;
export {
  AppContent_default as AppContent,
  Content_default as Content,
  Header_default as Header,
  Scrim_default as Scrim,
  Subtitle_default as Subtitle,
  Title_default as Title,
  dist_default as default
};
//# sourceMappingURL=@smui_drawer.js.map
