import {
  CommonIcon_default,
  CommonLabel_default,
  SmuiElement_default
} from "./chunk-DVQWFXPQ.js";
import {
  classMap,
  dispatch,
  forwardEventsBuilder,
  useActions
} from "./chunk-DXJYLXNN.js";
import {
  dist_default
} from "./chunk-PUBUOBZD.js";
import "./chunk-CTXZTH3U.js";
import "./chunk-AI3MMAIG.js";
import "./chunk-W4OU4FMO.js";
import "./chunk-OYKM6SV3.js";
import "./chunk-Y3XZ6UIT.js";
import "./chunk-RFTMRRON.js";
import "./chunk-ODRA5LQH.js";
import "./chunk-BT6PLM7B.js";
import "./chunk-X7HCJ7ZS.js";
import "./chunk-X43LXICK.js";
import "./chunk-ZB6PEJPW.js";
import "./chunk-FBWM3HWJ.js";
import {
  SvelteComponentDev,
  action_destroyer,
  add_location,
  assign,
  attr_dev,
  binding_callbacks,
  check_outros,
  children,
  claim_component,
  claim_element,
  claim_space,
  compute_rest_props,
  construct_svelte_component_dev,
  create_component,
  create_slot,
  destroy_component,
  detach_dev,
  dispatch_dev,
  element,
  empty,
  exclude_internal_props,
  getContext,
  get_all_dirty_from_scope,
  get_current_component,
  get_slot_changes,
  get_spread_object,
  get_spread_update,
  group_outros,
  init,
  insert_hydration_dev,
  is_function,
  mount_component,
  run_all,
  safe_not_equal,
  setContext,
  set_attributes,
  space,
  transition_in,
  transition_out,
  update_slot_base,
  validate_slots
} from "./chunk-NMMN3PC6.js";
import "./chunk-4DGM7FRE.js";
import "./chunk-7U33LM2Z.js";

// node_modules/@smui/button/dist/Button.svelte
var file = "node_modules/@smui/button/dist/Button.svelte";
function create_if_block(ctx) {
  let div;
  const block = {
    c: function create() {
      div = element("div");
      this.h();
    },
    l: function claim(nodes) {
      div = claim_element(nodes, "DIV", { class: true });
      children(div).forEach(detach_dev);
      this.h();
    },
    h: function hydrate() {
      attr_dev(div, "class", "mdc-button__touch");
      add_location(div, file, 50, 21, 1530);
    },
    m: function mount(target, anchor) {
      insert_hydration_dev(target, div, anchor);
    },
    d: function destroy(detaching) {
      if (detaching) {
        detach_dev(div);
      }
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_if_block.name,
    type: "if",
    source: "(51:10) {#if touch}",
    ctx
  });
  return block;
}
function create_default_slot(ctx) {
  let div;
  let t;
  let if_block_anchor;
  let current;
  const default_slot_template = (
    /*#slots*/
    ctx[28].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[30],
    null
  );
  let if_block = (
    /*touch*/
    ctx[6] && create_if_block(ctx)
  );
  const block = {
    c: function create() {
      div = element("div");
      t = space();
      if (default_slot)
        default_slot.c();
      if (if_block)
        if_block.c();
      if_block_anchor = empty();
      this.h();
    },
    l: function claim(nodes) {
      div = claim_element(nodes, "DIV", { class: true });
      children(div).forEach(detach_dev);
      t = claim_space(nodes);
      if (default_slot)
        default_slot.l(nodes);
      if (if_block)
        if_block.l(nodes);
      if_block_anchor = empty();
      this.h();
    },
    h: function hydrate() {
      attr_dev(div, "class", "mdc-button__ripple");
      add_location(div, file, 49, 3, 1474);
    },
    m: function mount(target, anchor) {
      insert_hydration_dev(target, div, anchor);
      insert_hydration_dev(target, t, anchor);
      if (default_slot) {
        default_slot.m(target, anchor);
      }
      if (if_block)
        if_block.m(target, anchor);
      insert_hydration_dev(target, if_block_anchor, anchor);
      current = true;
    },
    p: function update(ctx2, dirty) {
      if (default_slot) {
        if (default_slot.p && (!current || dirty[0] & /*$$scope*/
        1073741824)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[30],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[30]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[30],
              dirty,
              null
            ),
            null
          );
        }
      }
      if (
        /*touch*/
        ctx2[6]
      ) {
        if (if_block) {
        } else {
          if_block = create_if_block(ctx2);
          if_block.c();
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      } else if (if_block) {
        if_block.d(1);
        if_block = null;
      }
    },
    i: function intro(local) {
      if (current)
        return;
      transition_in(default_slot, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(default_slot, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching) {
        detach_dev(div);
        detach_dev(t);
        detach_dev(if_block_anchor);
      }
      if (default_slot)
        default_slot.d(detaching);
      if (if_block)
        if_block.d(detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_default_slot.name,
    type: "slot",
    source: "(1:0) <svelte:component   this={component}   {tag}   bind:this={element}   use={[     [       Ripple,       {         ripple,         unbounded: false,         color,         disabled: !!$$restProps.disabled,         addClass,         removeClass,         addStyle,       },     ],     forwardEvents,     ...use,   ]}   class={classMap({     [className]: true,     'mdc-button': true,     'mdc-button--raised': variant === 'raised',     'mdc-button--unelevated': variant === 'unelevated',     'mdc-button--outlined': variant === 'outlined',     'smui-button--color-secondary': color === 'secondary',     'mdc-button--touch': touch,     'mdc-card__action': context === 'card:action',     'mdc-card__action--button': context === 'card:action',     'mdc-dialog__button': context === 'dialog:action',     'mdc-top-app-bar__navigation-icon': context === 'top-app-bar:navigation',     'mdc-top-app-bar__action-item': context === 'top-app-bar:action',     'mdc-snackbar__action': context === 'snackbar:actions',     'mdc-banner__secondary-action': context === 'banner' && secondary,     'mdc-banner__primary-action': context === 'banner' && !secondary,     'mdc-tooltip__action': context === 'tooltip:rich-actions',     ...internalClasses,   })}   style={Object.entries(internalStyles)     .map(([name, value]) => `${name}: ${value};`)     .concat([style])     .join(' ')}   {...actionProp}   {...defaultProp}   {...secondaryProp}   {href}   on:click={handleClick}   {...$$restProps}   >",
    ctx
  });
  return block;
}
function create_fragment(ctx) {
  let switch_instance;
  let switch_instance_anchor;
  let current;
  const switch_instance_spread_levels = [
    { tag: (
      /*tag*/
      ctx[10]
    ) },
    {
      use: [
        [
          dist_default,
          {
            ripple: (
              /*ripple*/
              ctx[3]
            ),
            unbounded: false,
            color: (
              /*color*/
              ctx[4]
            ),
            disabled: !!/*$$restProps*/
            ctx[23].disabled,
            addClass: (
              /*addClass*/
              ctx[19]
            ),
            removeClass: (
              /*removeClass*/
              ctx[20]
            ),
            addStyle: (
              /*addStyle*/
              ctx[21]
            )
          }
        ],
        /*forwardEvents*/
        ctx[17],
        .../*use*/
        ctx[0]
      ]
    },
    {
      class: classMap({
        [
          /*className*/
          ctx[1]
        ]: true,
        "mdc-button": true,
        "mdc-button--raised": (
          /*variant*/
          ctx[5] === "raised"
        ),
        "mdc-button--unelevated": (
          /*variant*/
          ctx[5] === "unelevated"
        ),
        "mdc-button--outlined": (
          /*variant*/
          ctx[5] === "outlined"
        ),
        "smui-button--color-secondary": (
          /*color*/
          ctx[4] === "secondary"
        ),
        "mdc-button--touch": (
          /*touch*/
          ctx[6]
        ),
        "mdc-card__action": (
          /*context*/
          ctx[18] === "card:action"
        ),
        "mdc-card__action--button": (
          /*context*/
          ctx[18] === "card:action"
        ),
        "mdc-dialog__button": (
          /*context*/
          ctx[18] === "dialog:action"
        ),
        "mdc-top-app-bar__navigation-icon": (
          /*context*/
          ctx[18] === "top-app-bar:navigation"
        ),
        "mdc-top-app-bar__action-item": (
          /*context*/
          ctx[18] === "top-app-bar:action"
        ),
        "mdc-snackbar__action": (
          /*context*/
          ctx[18] === "snackbar:actions"
        ),
        "mdc-banner__secondary-action": (
          /*context*/
          ctx[18] === "banner" && /*secondary*/
          ctx[8]
        ),
        "mdc-banner__primary-action": (
          /*context*/
          ctx[18] === "banner" && !/*secondary*/
          ctx[8]
        ),
        "mdc-tooltip__action": (
          /*context*/
          ctx[18] === "tooltip:rich-actions"
        ),
        .../*internalClasses*/
        ctx[12]
      })
    },
    {
      style: Object.entries(
        /*internalStyles*/
        ctx[13]
      ).map(func).concat([
        /*style*/
        ctx[2]
      ]).join(" ")
    },
    /*actionProp*/
    ctx[16],
    /*defaultProp*/
    ctx[15],
    /*secondaryProp*/
    ctx[14],
    { href: (
      /*href*/
      ctx[7]
    ) },
    /*$$restProps*/
    ctx[23]
  ];
  var switch_value = (
    /*component*/
    ctx[9]
  );
  function switch_props(ctx2, dirty) {
    let switch_instance_props = {
      $$slots: { default: [create_default_slot] },
      $$scope: { ctx: ctx2 }
    };
    if (dirty !== void 0 && dirty[0] & /*tag, ripple, color, $$restProps, addClass, removeClass, addStyle, forwardEvents, use, className, variant, touch, context, secondary, internalClasses, internalStyles, style, actionProp, defaultProp, secondaryProp, href*/
    12580351) {
      switch_instance_props = get_spread_update(switch_instance_spread_levels, [
        dirty[0] & /*tag*/
        1024 && { tag: (
          /*tag*/
          ctx2[10]
        ) },
        dirty[0] & /*ripple, color, $$restProps, addClass, removeClass, addStyle, forwardEvents, use*/
        12189721 && {
          use: [
            [
              dist_default,
              {
                ripple: (
                  /*ripple*/
                  ctx2[3]
                ),
                unbounded: false,
                color: (
                  /*color*/
                  ctx2[4]
                ),
                disabled: !!/*$$restProps*/
                ctx2[23].disabled,
                addClass: (
                  /*addClass*/
                  ctx2[19]
                ),
                removeClass: (
                  /*removeClass*/
                  ctx2[20]
                ),
                addStyle: (
                  /*addStyle*/
                  ctx2[21]
                )
              }
            ],
            /*forwardEvents*/
            ctx2[17],
            .../*use*/
            ctx2[0]
          ]
        },
        dirty[0] & /*className, variant, color, touch, context, secondary, internalClasses*/
        266610 && {
          class: classMap({
            [
              /*className*/
              ctx2[1]
            ]: true,
            "mdc-button": true,
            "mdc-button--raised": (
              /*variant*/
              ctx2[5] === "raised"
            ),
            "mdc-button--unelevated": (
              /*variant*/
              ctx2[5] === "unelevated"
            ),
            "mdc-button--outlined": (
              /*variant*/
              ctx2[5] === "outlined"
            ),
            "smui-button--color-secondary": (
              /*color*/
              ctx2[4] === "secondary"
            ),
            "mdc-button--touch": (
              /*touch*/
              ctx2[6]
            ),
            "mdc-card__action": (
              /*context*/
              ctx2[18] === "card:action"
            ),
            "mdc-card__action--button": (
              /*context*/
              ctx2[18] === "card:action"
            ),
            "mdc-dialog__button": (
              /*context*/
              ctx2[18] === "dialog:action"
            ),
            "mdc-top-app-bar__navigation-icon": (
              /*context*/
              ctx2[18] === "top-app-bar:navigation"
            ),
            "mdc-top-app-bar__action-item": (
              /*context*/
              ctx2[18] === "top-app-bar:action"
            ),
            "mdc-snackbar__action": (
              /*context*/
              ctx2[18] === "snackbar:actions"
            ),
            "mdc-banner__secondary-action": (
              /*context*/
              ctx2[18] === "banner" && /*secondary*/
              ctx2[8]
            ),
            "mdc-banner__primary-action": (
              /*context*/
              ctx2[18] === "banner" && !/*secondary*/
              ctx2[8]
            ),
            "mdc-tooltip__action": (
              /*context*/
              ctx2[18] === "tooltip:rich-actions"
            ),
            .../*internalClasses*/
            ctx2[12]
          })
        },
        dirty[0] & /*internalStyles, style*/
        8196 && {
          style: Object.entries(
            /*internalStyles*/
            ctx2[13]
          ).map(func).concat([
            /*style*/
            ctx2[2]
          ]).join(" ")
        },
        dirty[0] & /*actionProp*/
        65536 && get_spread_object(
          /*actionProp*/
          ctx2[16]
        ),
        dirty[0] & /*defaultProp*/
        32768 && get_spread_object(
          /*defaultProp*/
          ctx2[15]
        ),
        dirty[0] & /*secondaryProp*/
        16384 && get_spread_object(
          /*secondaryProp*/
          ctx2[14]
        ),
        dirty[0] & /*href*/
        128 && { href: (
          /*href*/
          ctx2[7]
        ) },
        dirty[0] & /*$$restProps*/
        8388608 && get_spread_object(
          /*$$restProps*/
          ctx2[23]
        )
      ]);
    } else {
      for (let i = 0; i < switch_instance_spread_levels.length; i += 1) {
        switch_instance_props = assign(switch_instance_props, switch_instance_spread_levels[i]);
      }
    }
    return {
      props: switch_instance_props,
      $$inline: true
    };
  }
  if (switch_value) {
    switch_instance = construct_svelte_component_dev(switch_value, switch_props(ctx));
    ctx[29](switch_instance);
    switch_instance.$on(
      "click",
      /*handleClick*/
      ctx[22]
    );
  }
  const block = {
    c: function create() {
      if (switch_instance)
        create_component(switch_instance.$$.fragment);
      switch_instance_anchor = empty();
    },
    l: function claim(nodes) {
      if (switch_instance)
        claim_component(switch_instance.$$.fragment, nodes);
      switch_instance_anchor = empty();
    },
    m: function mount(target, anchor) {
      if (switch_instance)
        mount_component(switch_instance, target, anchor);
      insert_hydration_dev(target, switch_instance_anchor, anchor);
      current = true;
    },
    p: function update(ctx2, dirty) {
      if (dirty[0] & /*component*/
      512 && switch_value !== (switch_value = /*component*/
      ctx2[9])) {
        if (switch_instance) {
          group_outros();
          const old_component = switch_instance;
          transition_out(old_component.$$.fragment, 1, 0, () => {
            destroy_component(old_component, 1);
          });
          check_outros();
        }
        if (switch_value) {
          switch_instance = construct_svelte_component_dev(switch_value, switch_props(ctx2, dirty));
          ctx2[29](switch_instance);
          switch_instance.$on(
            "click",
            /*handleClick*/
            ctx2[22]
          );
          create_component(switch_instance.$$.fragment);
          transition_in(switch_instance.$$.fragment, 1);
          mount_component(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
        } else {
          switch_instance = null;
        }
      } else if (switch_value) {
        const switch_instance_changes = dirty[0] & /*tag, ripple, color, $$restProps, addClass, removeClass, addStyle, forwardEvents, use, className, variant, touch, context, secondary, internalClasses, internalStyles, style, actionProp, defaultProp, secondaryProp, href*/
        12580351 ? get_spread_update(switch_instance_spread_levels, [
          dirty[0] & /*tag*/
          1024 && { tag: (
            /*tag*/
            ctx2[10]
          ) },
          dirty[0] & /*ripple, color, $$restProps, addClass, removeClass, addStyle, forwardEvents, use*/
          12189721 && {
            use: [
              [
                dist_default,
                {
                  ripple: (
                    /*ripple*/
                    ctx2[3]
                  ),
                  unbounded: false,
                  color: (
                    /*color*/
                    ctx2[4]
                  ),
                  disabled: !!/*$$restProps*/
                  ctx2[23].disabled,
                  addClass: (
                    /*addClass*/
                    ctx2[19]
                  ),
                  removeClass: (
                    /*removeClass*/
                    ctx2[20]
                  ),
                  addStyle: (
                    /*addStyle*/
                    ctx2[21]
                  )
                }
              ],
              /*forwardEvents*/
              ctx2[17],
              .../*use*/
              ctx2[0]
            ]
          },
          dirty[0] & /*className, variant, color, touch, context, secondary, internalClasses*/
          266610 && {
            class: classMap({
              [
                /*className*/
                ctx2[1]
              ]: true,
              "mdc-button": true,
              "mdc-button--raised": (
                /*variant*/
                ctx2[5] === "raised"
              ),
              "mdc-button--unelevated": (
                /*variant*/
                ctx2[5] === "unelevated"
              ),
              "mdc-button--outlined": (
                /*variant*/
                ctx2[5] === "outlined"
              ),
              "smui-button--color-secondary": (
                /*color*/
                ctx2[4] === "secondary"
              ),
              "mdc-button--touch": (
                /*touch*/
                ctx2[6]
              ),
              "mdc-card__action": (
                /*context*/
                ctx2[18] === "card:action"
              ),
              "mdc-card__action--button": (
                /*context*/
                ctx2[18] === "card:action"
              ),
              "mdc-dialog__button": (
                /*context*/
                ctx2[18] === "dialog:action"
              ),
              "mdc-top-app-bar__navigation-icon": (
                /*context*/
                ctx2[18] === "top-app-bar:navigation"
              ),
              "mdc-top-app-bar__action-item": (
                /*context*/
                ctx2[18] === "top-app-bar:action"
              ),
              "mdc-snackbar__action": (
                /*context*/
                ctx2[18] === "snackbar:actions"
              ),
              "mdc-banner__secondary-action": (
                /*context*/
                ctx2[18] === "banner" && /*secondary*/
                ctx2[8]
              ),
              "mdc-banner__primary-action": (
                /*context*/
                ctx2[18] === "banner" && !/*secondary*/
                ctx2[8]
              ),
              "mdc-tooltip__action": (
                /*context*/
                ctx2[18] === "tooltip:rich-actions"
              ),
              .../*internalClasses*/
              ctx2[12]
            })
          },
          dirty[0] & /*internalStyles, style*/
          8196 && {
            style: Object.entries(
              /*internalStyles*/
              ctx2[13]
            ).map(func).concat([
              /*style*/
              ctx2[2]
            ]).join(" ")
          },
          dirty[0] & /*actionProp*/
          65536 && get_spread_object(
            /*actionProp*/
            ctx2[16]
          ),
          dirty[0] & /*defaultProp*/
          32768 && get_spread_object(
            /*defaultProp*/
            ctx2[15]
          ),
          dirty[0] & /*secondaryProp*/
          16384 && get_spread_object(
            /*secondaryProp*/
            ctx2[14]
          ),
          dirty[0] & /*href*/
          128 && { href: (
            /*href*/
            ctx2[7]
          ) },
          dirty[0] & /*$$restProps*/
          8388608 && get_spread_object(
            /*$$restProps*/
            ctx2[23]
          )
        ]) : {};
        if (dirty[0] & /*$$scope, touch*/
        1073741888) {
          switch_instance_changes.$$scope = { dirty, ctx: ctx2 };
        }
        switch_instance.$set(switch_instance_changes);
      }
    },
    i: function intro(local) {
      if (current)
        return;
      if (switch_instance)
        transition_in(switch_instance.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      if (switch_instance)
        transition_out(switch_instance.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching) {
        detach_dev(switch_instance_anchor);
      }
      ctx[29](null);
      if (switch_instance)
        destroy_component(switch_instance, detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_fragment.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
var func = ([name, value]) => `${name}: ${value};`;
function instance($$self, $$props, $$invalidate) {
  let actionProp;
  let defaultProp;
  let secondaryProp;
  const omit_props_names = [
    "use",
    "class",
    "style",
    "ripple",
    "color",
    "variant",
    "touch",
    "href",
    "action",
    "defaultAction",
    "secondary",
    "component",
    "tag",
    "getElement"
  ];
  let $$restProps = compute_rest_props($$props, omit_props_names);
  let { $$slots: slots = {}, $$scope } = $$props;
  validate_slots("Button", slots, ["default"]);
  const forwardEvents = forwardEventsBuilder(get_current_component());
  let { use = [] } = $$props;
  let { class: className = "" } = $$props;
  let { style = "" } = $$props;
  let { ripple = true } = $$props;
  let { color = "primary" } = $$props;
  let { variant = "text" } = $$props;
  let { touch = false } = $$props;
  let { href = void 0 } = $$props;
  let { action = "close" } = $$props;
  let { defaultAction = false } = $$props;
  let { secondary = false } = $$props;
  let element2;
  let internalClasses = {};
  let internalStyles = {};
  let context = getContext("SMUI:button:context");
  let { component = SmuiElement_default } = $$props;
  let { tag = component === SmuiElement_default ? href == null ? "button" : "a" : void 0 } = $$props;
  let previousDisabled = $$restProps.disabled;
  setContext("SMUI:label:context", "button");
  setContext("SMUI:icon:context", "button");
  function addClass(className2) {
    if (!internalClasses[className2]) {
      $$invalidate(12, internalClasses[className2] = true, internalClasses);
    }
  }
  function removeClass(className2) {
    if (!(className2 in internalClasses) || internalClasses[className2]) {
      $$invalidate(12, internalClasses[className2] = false, internalClasses);
    }
  }
  function addStyle(name, value) {
    if (internalStyles[name] != value) {
      if (value === "" || value == null) {
        delete internalStyles[name];
        $$invalidate(13, internalStyles);
      } else {
        $$invalidate(13, internalStyles[name] = value, internalStyles);
      }
    }
  }
  function handleClick() {
    if (context === "banner") {
      dispatch(getElement(), secondary ? "SMUIBannerButton:secondaryActionClick" : "SMUIBannerButton:primaryActionClick");
    }
  }
  function getElement() {
    return element2.getElement();
  }
  function switch_instance_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      element2 = $$value;
      $$invalidate(11, element2);
    });
  }
  $$self.$$set = ($$new_props) => {
    $$invalidate(31, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    $$invalidate(23, $$restProps = compute_rest_props($$props, omit_props_names));
    if ("use" in $$new_props)
      $$invalidate(0, use = $$new_props.use);
    if ("class" in $$new_props)
      $$invalidate(1, className = $$new_props.class);
    if ("style" in $$new_props)
      $$invalidate(2, style = $$new_props.style);
    if ("ripple" in $$new_props)
      $$invalidate(3, ripple = $$new_props.ripple);
    if ("color" in $$new_props)
      $$invalidate(4, color = $$new_props.color);
    if ("variant" in $$new_props)
      $$invalidate(5, variant = $$new_props.variant);
    if ("touch" in $$new_props)
      $$invalidate(6, touch = $$new_props.touch);
    if ("href" in $$new_props)
      $$invalidate(7, href = $$new_props.href);
    if ("action" in $$new_props)
      $$invalidate(24, action = $$new_props.action);
    if ("defaultAction" in $$new_props)
      $$invalidate(25, defaultAction = $$new_props.defaultAction);
    if ("secondary" in $$new_props)
      $$invalidate(8, secondary = $$new_props.secondary);
    if ("component" in $$new_props)
      $$invalidate(9, component = $$new_props.component);
    if ("tag" in $$new_props)
      $$invalidate(10, tag = $$new_props.tag);
    if ("$$scope" in $$new_props)
      $$invalidate(30, $$scope = $$new_props.$$scope);
  };
  $$self.$capture_state = () => ({
    setContext,
    getContext,
    get_current_component,
    forwardEventsBuilder,
    classMap,
    dispatch,
    Ripple: dist_default,
    SmuiElement: SmuiElement_default,
    forwardEvents,
    use,
    className,
    style,
    ripple,
    color,
    variant,
    touch,
    href,
    action,
    defaultAction,
    secondary,
    element: element2,
    internalClasses,
    internalStyles,
    context,
    component,
    tag,
    previousDisabled,
    addClass,
    removeClass,
    addStyle,
    handleClick,
    getElement,
    secondaryProp,
    defaultProp,
    actionProp
  });
  $$self.$inject_state = ($$new_props) => {
    $$invalidate(31, $$props = assign(assign({}, $$props), $$new_props));
    if ("use" in $$props)
      $$invalidate(0, use = $$new_props.use);
    if ("className" in $$props)
      $$invalidate(1, className = $$new_props.className);
    if ("style" in $$props)
      $$invalidate(2, style = $$new_props.style);
    if ("ripple" in $$props)
      $$invalidate(3, ripple = $$new_props.ripple);
    if ("color" in $$props)
      $$invalidate(4, color = $$new_props.color);
    if ("variant" in $$props)
      $$invalidate(5, variant = $$new_props.variant);
    if ("touch" in $$props)
      $$invalidate(6, touch = $$new_props.touch);
    if ("href" in $$props)
      $$invalidate(7, href = $$new_props.href);
    if ("action" in $$props)
      $$invalidate(24, action = $$new_props.action);
    if ("defaultAction" in $$props)
      $$invalidate(25, defaultAction = $$new_props.defaultAction);
    if ("secondary" in $$props)
      $$invalidate(8, secondary = $$new_props.secondary);
    if ("element" in $$props)
      $$invalidate(11, element2 = $$new_props.element);
    if ("internalClasses" in $$props)
      $$invalidate(12, internalClasses = $$new_props.internalClasses);
    if ("internalStyles" in $$props)
      $$invalidate(13, internalStyles = $$new_props.internalStyles);
    if ("context" in $$props)
      $$invalidate(18, context = $$new_props.context);
    if ("component" in $$props)
      $$invalidate(9, component = $$new_props.component);
    if ("tag" in $$props)
      $$invalidate(10, tag = $$new_props.tag);
    if ("previousDisabled" in $$props)
      $$invalidate(27, previousDisabled = $$new_props.previousDisabled);
    if ("secondaryProp" in $$props)
      $$invalidate(14, secondaryProp = $$new_props.secondaryProp);
    if ("defaultProp" in $$props)
      $$invalidate(15, defaultProp = $$new_props.defaultProp);
    if ("actionProp" in $$props)
      $$invalidate(16, actionProp = $$new_props.actionProp);
  };
  if ($$props && "$$inject" in $$props) {
    $$self.$inject_state($$props.$$inject);
  }
  $$self.$$.update = () => {
    $:
      $$invalidate(16, actionProp = context === "dialog:action" && action != null ? { "data-mdc-dialog-action": action } : { action: $$props.action });
    $:
      $$invalidate(15, defaultProp = context === "dialog:action" && defaultAction ? { "data-mdc-dialog-button-default": "" } : { default: $$props.default });
    $:
      $$invalidate(14, secondaryProp = context === "banner" ? {} : { secondary: $$props.secondary });
    $:
      if (previousDisabled !== $$restProps.disabled) {
        const el = getElement();
        if ("blur" in el) {
          el.blur();
        }
        $$invalidate(27, previousDisabled = $$restProps.disabled);
      }
  };
  $$props = exclude_internal_props($$props);
  return [
    use,
    className,
    style,
    ripple,
    color,
    variant,
    touch,
    href,
    secondary,
    component,
    tag,
    element2,
    internalClasses,
    internalStyles,
    secondaryProp,
    defaultProp,
    actionProp,
    forwardEvents,
    context,
    addClass,
    removeClass,
    addStyle,
    handleClick,
    $$restProps,
    action,
    defaultAction,
    getElement,
    previousDisabled,
    slots,
    switch_instance_binding,
    $$scope
  ];
}
var Button = class extends SvelteComponentDev {
  constructor(options) {
    super(options);
    init(
      this,
      options,
      instance,
      create_fragment,
      safe_not_equal,
      {
        use: 0,
        class: 1,
        style: 2,
        ripple: 3,
        color: 4,
        variant: 5,
        touch: 6,
        href: 7,
        action: 24,
        defaultAction: 25,
        secondary: 8,
        component: 9,
        tag: 10,
        getElement: 26
      },
      null,
      [-1, -1]
    );
    dispatch_dev("SvelteRegisterComponent", {
      component: this,
      tagName: "Button",
      options,
      id: create_fragment.name
    });
  }
  get use() {
    throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set use(value) {
    throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get class() {
    throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set class(value) {
    throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get style() {
    throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set style(value) {
    throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get ripple() {
    throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set ripple(value) {
    throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get color() {
    throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set color(value) {
    throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get variant() {
    throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set variant(value) {
    throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get touch() {
    throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set touch(value) {
    throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get href() {
    throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set href(value) {
    throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get action() {
    throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set action(value) {
    throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get defaultAction() {
    throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set defaultAction(value) {
    throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get secondary() {
    throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set secondary(value) {
    throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get component() {
    throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set component(value) {
    throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get tag() {
    throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set tag(value) {
    throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get getElement() {
    return this.$$.ctx[26];
  }
  set getElement(value) {
    throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
};
var Button_default = Button;

// node_modules/@smui/button/dist/Group.svelte
var file2 = "node_modules/@smui/button/dist/Group.svelte";
function create_fragment2(ctx) {
  let div;
  let div_class_value;
  let useActions_action;
  let forwardEvents_action;
  let current;
  let mounted;
  let dispose;
  const default_slot_template = (
    /*#slots*/
    ctx[8].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[7],
    null
  );
  let div_levels = [
    {
      class: div_class_value = classMap({
        [
          /*className*/
          ctx[1]
        ]: true,
        "smui-button__group": true,
        "smui-button__group--raised": (
          /*variant*/
          ctx[2] === "raised"
        )
      })
    },
    /*$$restProps*/
    ctx[5]
  ];
  let div_data = {};
  for (let i = 0; i < div_levels.length; i += 1) {
    div_data = assign(div_data, div_levels[i]);
  }
  const block = {
    c: function create() {
      div = element("div");
      if (default_slot)
        default_slot.c();
      this.h();
    },
    l: function claim(nodes) {
      div = claim_element(nodes, "DIV", { class: true });
      var div_nodes = children(div);
      if (default_slot)
        default_slot.l(div_nodes);
      div_nodes.forEach(detach_dev);
      this.h();
    },
    h: function hydrate() {
      set_attributes(div, div_data);
      add_location(div, file2, 0, 0, 0);
    },
    m: function mount(target, anchor) {
      insert_hydration_dev(target, div, anchor);
      if (default_slot) {
        default_slot.m(div, null);
      }
      ctx[9](div);
      current = true;
      if (!mounted) {
        dispose = [
          action_destroyer(useActions_action = useActions.call(
            null,
            div,
            /*use*/
            ctx[0]
          )),
          action_destroyer(forwardEvents_action = /*forwardEvents*/
          ctx[4].call(null, div))
        ];
        mounted = true;
      }
    },
    p: function update(ctx2, [dirty]) {
      if (default_slot) {
        if (default_slot.p && (!current || dirty & /*$$scope*/
        128)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[7],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[7]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[7],
              dirty,
              null
            ),
            null
          );
        }
      }
      set_attributes(div, div_data = get_spread_update(div_levels, [
        (!current || dirty & /*className, variant*/
        6 && div_class_value !== (div_class_value = classMap({
          [
            /*className*/
            ctx2[1]
          ]: true,
          "smui-button__group": true,
          "smui-button__group--raised": (
            /*variant*/
            ctx2[2] === "raised"
          )
        }))) && { class: div_class_value },
        dirty & /*$$restProps*/
        32 && /*$$restProps*/
        ctx2[5]
      ]));
      if (useActions_action && is_function(useActions_action.update) && dirty & /*use*/
      1)
        useActions_action.update.call(
          null,
          /*use*/
          ctx2[0]
        );
    },
    i: function intro(local) {
      if (current)
        return;
      transition_in(default_slot, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(default_slot, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching) {
        detach_dev(div);
      }
      if (default_slot)
        default_slot.d(detaching);
      ctx[9](null);
      mounted = false;
      run_all(dispose);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_fragment2.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function instance2($$self, $$props, $$invalidate) {
  const omit_props_names = ["use", "class", "variant", "getElement"];
  let $$restProps = compute_rest_props($$props, omit_props_names);
  let { $$slots: slots = {}, $$scope } = $$props;
  validate_slots("Group", slots, ["default"]);
  const forwardEvents = forwardEventsBuilder(get_current_component());
  let { use = [] } = $$props;
  let { class: className = "" } = $$props;
  let { variant = "text" } = $$props;
  let element2;
  function getElement() {
    return element2;
  }
  function div_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      element2 = $$value;
      $$invalidate(3, element2);
    });
  }
  $$self.$$set = ($$new_props) => {
    $$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
    $$invalidate(5, $$restProps = compute_rest_props($$props, omit_props_names));
    if ("use" in $$new_props)
      $$invalidate(0, use = $$new_props.use);
    if ("class" in $$new_props)
      $$invalidate(1, className = $$new_props.class);
    if ("variant" in $$new_props)
      $$invalidate(2, variant = $$new_props.variant);
    if ("$$scope" in $$new_props)
      $$invalidate(7, $$scope = $$new_props.$$scope);
  };
  $$self.$capture_state = () => ({
    get_current_component,
    forwardEventsBuilder,
    classMap,
    useActions,
    forwardEvents,
    use,
    className,
    variant,
    element: element2,
    getElement
  });
  $$self.$inject_state = ($$new_props) => {
    if ("use" in $$props)
      $$invalidate(0, use = $$new_props.use);
    if ("className" in $$props)
      $$invalidate(1, className = $$new_props.className);
    if ("variant" in $$props)
      $$invalidate(2, variant = $$new_props.variant);
    if ("element" in $$props)
      $$invalidate(3, element2 = $$new_props.element);
  };
  if ($$props && "$$inject" in $$props) {
    $$self.$inject_state($$props.$$inject);
  }
  return [
    use,
    className,
    variant,
    element2,
    forwardEvents,
    $$restProps,
    getElement,
    $$scope,
    slots,
    div_binding
  ];
}
var Group = class extends SvelteComponentDev {
  constructor(options) {
    super(options);
    init(this, options, instance2, create_fragment2, safe_not_equal, {
      use: 0,
      class: 1,
      variant: 2,
      getElement: 6
    });
    dispatch_dev("SvelteRegisterComponent", {
      component: this,
      tagName: "Group",
      options,
      id: create_fragment2.name
    });
  }
  get use() {
    throw new Error("<Group>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set use(value) {
    throw new Error("<Group>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get class() {
    throw new Error("<Group>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set class(value) {
    throw new Error("<Group>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get variant() {
    throw new Error("<Group>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set variant(value) {
    throw new Error("<Group>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get getElement() {
    return this.$$.ctx[6];
  }
  set getElement(value) {
    throw new Error("<Group>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
};
var Group_default = Group;

// node_modules/@smui/button/dist/GroupItem.js
function GroupItem(node, { addClass = (className) => node.classList.add(className), removeClass = (className) => node.classList.remove(className) } = {}) {
  addClass("smui-button__group-item");
  return {
    destroy() {
      removeClass("smui-button__group-item");
    }
  };
}

// node_modules/@smui/button/dist/index.js
var dist_default2 = Button_default;
export {
  Group_default as Group,
  GroupItem,
  CommonIcon_default as Icon,
  CommonLabel_default as Label,
  dist_default2 as default
};
//# sourceMappingURL=@smui_button.js.map
